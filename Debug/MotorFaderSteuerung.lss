
MotorFaderSteuerung.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         00002e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00002e22  00002eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  00800060  00800060  00002eb6  2**0
                  ALLOC
  3 .stab         00004f74  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174e  00000000  00000000  00007e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000957a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_6>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_10>
      2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_13>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 3a       	cpi	r26, 0xAB	; 171
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 2d 12 	call	0x245a	; 0x245a <main>
      74:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
      7c:	1f 92       	push	r1
      7e:	0f 92       	push	r0
      80:	00 90 5f 00 	lds	r0, 0x005F
      84:	0f 92       	push	r0
      86:	11 24       	eor	r1, r1
      88:	2f 93       	push	r18
      8a:	8f 93       	push	r24
      8c:	9f 93       	push	r25
      8e:	ef 93       	push	r30
      90:	ff 93       	push	r31
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	80 91 64 00 	lds	r24, 0x0064
      a0:	8d 7f       	andi	r24, 0xFD	; 253
      a2:	80 93 64 00 	sts	0x0064, r24
      a6:	8c e2       	ldi	r24, 0x2C	; 44
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	fc 01       	movw	r30, r24
      ac:	80 81       	ld	r24, Z
      ae:	89 83       	std	Y+1, r24	; 0x01
      b0:	89 81       	ldd	r24, Y+1	; 0x01
      b2:	88 23       	and	r24, r24
      b4:	49 f4       	brne	.+18     	; 0xc8 <__vector_11+0x4c>
      b6:	80 91 62 00 	lds	r24, 0x0062
      ba:	80 93 63 00 	sts	0x0063, r24
      be:	80 91 64 00 	lds	r24, 0x0064
      c2:	82 60       	ori	r24, 0x02	; 2
      c4:	80 93 64 00 	sts	0x0064, r24
      c8:	80 91 62 00 	lds	r24, 0x0062
      cc:	88 2f       	mov	r24, r24
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	8a 57       	subi	r24, 0x7A	; 122
      d2:	9f 4f       	sbci	r25, 0xFF	; 255
      d4:	29 81       	ldd	r18, Y+1	; 0x01
      d6:	fc 01       	movw	r30, r24
      d8:	20 83       	st	Z, r18
      da:	80 91 62 00 	lds	r24, 0x0062
      de:	8f 5f       	subi	r24, 0xFF	; 255
      e0:	80 93 62 00 	sts	0x0062, r24
      e4:	0f 90       	pop	r0
      e6:	df 91       	pop	r29
      e8:	cf 91       	pop	r28
      ea:	ff 91       	pop	r31
      ec:	ef 91       	pop	r30
      ee:	9f 91       	pop	r25
      f0:	8f 91       	pop	r24
      f2:	2f 91       	pop	r18
      f4:	0f 90       	pop	r0
      f6:	00 92 5f 00 	sts	0x005F, r0
      fa:	0f 90       	pop	r0
      fc:	1f 90       	pop	r1
      fe:	18 95       	reti

00000100 <__vector_13>:
	iInMessage ++;

}

ISR(USART_TXC_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	00 90 5f 00 	lds	r0, 0x005F
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	8f 93       	push	r24
     112:	9f 93       	push	r25
     114:	ef 93       	push	r30
     116:	ff 93       	push	r31
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
	if(iOutMessage < numOutMessage){
     120:	90 91 60 00 	lds	r25, 0x0060
     124:	80 91 61 00 	lds	r24, 0x0061
     128:	98 17       	cp	r25, r24
     12a:	b0 f4       	brcc	.+44     	; 0x158 <__vector_13+0x58>
		uartFlag &=~ (1<<SENDET);
     12c:	80 91 64 00 	lds	r24, 0x0064
     130:	8e 7f       	andi	r24, 0xFE	; 254
     132:	80 93 64 00 	sts	0x0064, r24
		//nächstes Byte senden
		UDR = outMessage[iOutMessage ++];
     136:	8c e2       	ldi	r24, 0x2C	; 44
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	20 91 60 00 	lds	r18, 0x0060
     13e:	31 e0       	ldi	r19, 0x01	; 1
     140:	32 0f       	add	r19, r18
     142:	30 93 60 00 	sts	0x0060, r19
     146:	22 2f       	mov	r18, r18
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	2e 58       	subi	r18, 0x8E	; 142
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
     156:	1a c0       	rjmp	.+52     	; 0x18c <__vector_13+0x8c>
	} else if(iOutMessage == numOutMessage){
     158:	90 91 60 00 	lds	r25, 0x0060
     15c:	80 91 61 00 	lds	r24, 0x0061
     160:	98 17       	cp	r25, r24
     162:	79 f4       	brne	.+30     	; 0x182 <__vector_13+0x82>
		//Ende senden
		iOutMessage ++;
     164:	80 91 60 00 	lds	r24, 0x0060
     168:	8f 5f       	subi	r24, 0xFF	; 255
     16a:	80 93 60 00 	sts	0x0060, r24
		UDR = '\0';
     16e:	8c e2       	ldi	r24, 0x2C	; 44
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	fc 01       	movw	r30, r24
     174:	10 82       	st	Z, r1
		uartFlag |= (1<<SENDET);
     176:	80 91 64 00 	lds	r24, 0x0064
     17a:	81 60       	ori	r24, 0x01	; 1
     17c:	80 93 64 00 	sts	0x0064, r24
     180:	05 c0       	rjmp	.+10     	; 0x18c <__vector_13+0x8c>
	} else {
		uartFlag |= (1<<SENDET);
     182:	80 91 64 00 	lds	r24, 0x0064
     186:	81 60       	ori	r24, 0x01	; 1
     188:	80 93 64 00 	sts	0x0064, r24
	}
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	ff 91       	pop	r31
     192:	ef 91       	pop	r30
     194:	9f 91       	pop	r25
     196:	8f 91       	pop	r24
     198:	3f 91       	pop	r19
     19a:	2f 91       	pop	r18
     19c:	0f 90       	pop	r0
     19e:	00 92 5f 00 	sts	0x005F, r0
     1a2:	0f 90       	pop	r0
     1a4:	1f 90       	pop	r1
     1a6:	18 95       	reti

000001a8 <uart_init>:

void uart_init(void)
{
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
	UBRRH = 0x00;//UBRR_VAL >> 8;
     1b0:	80 e4       	ldi	r24, 0x40	; 64
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	10 82       	st	Z, r1
	UBRRL = 95;//UBRR_VAL & 0xFF;
     1b8:	89 e2       	ldi	r24, 0x29	; 41
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	2f e5       	ldi	r18, 0x5F	; 95
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18

	UCSRB |= (1<<TXEN) | (1<<RXEN) | (1<<RXCIE)| (1<<TXCIE);  // UART TX einschalten
     1c2:	8a e2       	ldi	r24, 0x2A	; 42
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	2a e2       	ldi	r18, 0x2A	; 42
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	f9 01       	movw	r30, r18
     1cc:	20 81       	ld	r18, Z
     1ce:	28 6d       	ori	r18, 0xD8	; 216
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18
	//UCSRB |= (1<<RXEN);                        // UART RX einschalten & Interrupt on Receive
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // Asynchron 8N1
     1d4:	80 e4       	ldi	r24, 0x40	; 64
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	26 e8       	ldi	r18, 0x86	; 134
     1da:	fc 01       	movw	r30, r24
     1dc:	20 83       	st	Z, r18
	sei();
     1de:	78 94       	sei
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <sendMessage>:

//start senden
void sendMessage(void){
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
	if(numOutMessage > 0 && iOutMessage == 0){
     1ee:	80 91 61 00 	lds	r24, 0x0061
     1f2:	88 23       	and	r24, r24
     1f4:	d1 f0       	breq	.+52     	; 0x22a <sendMessage+0x44>
     1f6:	80 91 60 00 	lds	r24, 0x0060
     1fa:	88 23       	and	r24, r24
     1fc:	b1 f4       	brne	.+44     	; 0x22a <sendMessage+0x44>
		uartFlag &=~ (1<<SENDET);
     1fe:	80 91 64 00 	lds	r24, 0x0064
     202:	8e 7f       	andi	r24, 0xFE	; 254
     204:	80 93 64 00 	sts	0x0064, r24
		UDR = outMessage[iOutMessage];
     208:	8c e2       	ldi	r24, 0x2C	; 44
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	20 91 60 00 	lds	r18, 0x0060
     210:	22 2f       	mov	r18, r18
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	2e 58       	subi	r18, 0x8E	; 142
     216:	3f 4f       	sbci	r19, 0xFF	; 255
     218:	f9 01       	movw	r30, r18
     21a:	20 81       	ld	r18, Z
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
		iOutMessage++;
     220:	80 91 60 00 	lds	r24, 0x0060
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	80 93 60 00 	sts	0x0060, r24
	}
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <startMotor>:
 */
#include "motor.h"

static uint32_t shiftData = 0;

void startMotor(uint8_t num, uint8_t direction){
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <startMotor+0x6>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	89 83       	std	Y+1, r24	; 0x01
     23c:	6a 83       	std	Y+2, r22	; 0x02
	if(direction == VOR){
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	09 f0       	breq	.+2      	; 0x246 <startMotor+0x16>
     244:	51 c0       	rjmp	.+162    	; 0x2e8 <startMotor+0xb8>
		shiftData |= (1 << (2*num));
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	88 2f       	mov	r24, r24
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	9c 01       	movw	r18, r24
     24e:	22 0f       	add	r18, r18
     250:	33 1f       	adc	r19, r19
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	02 c0       	rjmp	.+4      	; 0x25c <startMotor+0x2c>
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	2a 95       	dec	r18
     25e:	e2 f7       	brpl	.-8      	; 0x258 <startMotor+0x28>
     260:	9c 01       	movw	r18, r24
     262:	44 27       	eor	r20, r20
     264:	37 fd       	sbrc	r19, 7
     266:	40 95       	com	r20
     268:	54 2f       	mov	r21, r20
     26a:	80 91 65 00 	lds	r24, 0x0065
     26e:	90 91 66 00 	lds	r25, 0x0066
     272:	a0 91 67 00 	lds	r26, 0x0067
     276:	b0 91 68 00 	lds	r27, 0x0068
     27a:	82 2b       	or	r24, r18
     27c:	93 2b       	or	r25, r19
     27e:	a4 2b       	or	r26, r20
     280:	b5 2b       	or	r27, r21
     282:	80 93 65 00 	sts	0x0065, r24
     286:	90 93 66 00 	sts	0x0066, r25
     28a:	a0 93 67 00 	sts	0x0067, r26
     28e:	b0 93 68 00 	sts	0x0068, r27
		shiftData &= ~(1 << (2* num + 1));
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	88 2f       	mov	r24, r24
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	9c 01       	movw	r18, r24
     29e:	2f 5f       	subi	r18, 0xFF	; 255
     2a0:	3f 4f       	sbci	r19, 0xFF	; 255
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <startMotor+0x7c>
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	2a 95       	dec	r18
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <startMotor+0x78>
     2b0:	80 95       	com	r24
     2b2:	90 95       	com	r25
     2b4:	9c 01       	movw	r18, r24
     2b6:	44 27       	eor	r20, r20
     2b8:	37 fd       	sbrc	r19, 7
     2ba:	40 95       	com	r20
     2bc:	54 2f       	mov	r21, r20
     2be:	80 91 65 00 	lds	r24, 0x0065
     2c2:	90 91 66 00 	lds	r25, 0x0066
     2c6:	a0 91 67 00 	lds	r26, 0x0067
     2ca:	b0 91 68 00 	lds	r27, 0x0068
     2ce:	82 23       	and	r24, r18
     2d0:	93 23       	and	r25, r19
     2d2:	a4 23       	and	r26, r20
     2d4:	b5 23       	and	r27, r21
     2d6:	80 93 65 00 	sts	0x0065, r24
     2da:	90 93 66 00 	sts	0x0066, r25
     2de:	a0 93 67 00 	sts	0x0067, r26
     2e2:	b0 93 68 00 	sts	0x0068, r27
     2e6:	50 c0       	rjmp	.+160    	; 0x388 <startMotor+0x158>
	} else {
		shiftData &= ~(1 << (2*num));
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9c 01       	movw	r18, r24
     2f0:	22 0f       	add	r18, r18
     2f2:	33 1f       	adc	r19, r19
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <startMotor+0xce>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	2a 95       	dec	r18
     300:	e2 f7       	brpl	.-8      	; 0x2fa <startMotor+0xca>
     302:	80 95       	com	r24
     304:	90 95       	com	r25
     306:	9c 01       	movw	r18, r24
     308:	44 27       	eor	r20, r20
     30a:	37 fd       	sbrc	r19, 7
     30c:	40 95       	com	r20
     30e:	54 2f       	mov	r21, r20
     310:	80 91 65 00 	lds	r24, 0x0065
     314:	90 91 66 00 	lds	r25, 0x0066
     318:	a0 91 67 00 	lds	r26, 0x0067
     31c:	b0 91 68 00 	lds	r27, 0x0068
     320:	82 23       	and	r24, r18
     322:	93 23       	and	r25, r19
     324:	a4 23       	and	r26, r20
     326:	b5 23       	and	r27, r21
     328:	80 93 65 00 	sts	0x0065, r24
     32c:	90 93 66 00 	sts	0x0066, r25
     330:	a0 93 67 00 	sts	0x0067, r26
     334:	b0 93 68 00 	sts	0x0068, r27
		shiftData |= (1 << (2* num + 1));
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	88 2f       	mov	r24, r24
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	9c 01       	movw	r18, r24
     344:	2f 5f       	subi	r18, 0xFF	; 255
     346:	3f 4f       	sbci	r19, 0xFF	; 255
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	02 c0       	rjmp	.+4      	; 0x352 <startMotor+0x122>
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	2a 95       	dec	r18
     354:	e2 f7       	brpl	.-8      	; 0x34e <startMotor+0x11e>
     356:	9c 01       	movw	r18, r24
     358:	44 27       	eor	r20, r20
     35a:	37 fd       	sbrc	r19, 7
     35c:	40 95       	com	r20
     35e:	54 2f       	mov	r21, r20
     360:	80 91 65 00 	lds	r24, 0x0065
     364:	90 91 66 00 	lds	r25, 0x0066
     368:	a0 91 67 00 	lds	r26, 0x0067
     36c:	b0 91 68 00 	lds	r27, 0x0068
     370:	82 2b       	or	r24, r18
     372:	93 2b       	or	r25, r19
     374:	a4 2b       	or	r26, r20
     376:	b5 2b       	or	r27, r21
     378:	80 93 65 00 	sts	0x0065, r24
     37c:	90 93 66 00 	sts	0x0066, r25
     380:	a0 93 67 00 	sts	0x0067, r26
     384:	b0 93 68 00 	sts	0x0068, r27
	}

	shift(shiftData);
     388:	80 91 65 00 	lds	r24, 0x0065
     38c:	90 91 66 00 	lds	r25, 0x0066
     390:	a0 91 67 00 	lds	r26, 0x0067
     394:	b0 91 68 00 	lds	r27, 0x0068
     398:	bc 01       	movw	r22, r24
     39a:	cd 01       	movw	r24, r26
     39c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <shift>
}
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <stopMotor>:

void stopMotor(uint8_t num){
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	1f 92       	push	r1
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	89 83       	std	Y+1, r24	; 0x01
	shiftData &= ~(1 << (2*num));
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	88 2f       	mov	r24, r24
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	9c 01       	movw	r18, r24
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <stopMotor+0x22>
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	2a 95       	dec	r18
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <stopMotor+0x1e>
     3d0:	80 95       	com	r24
     3d2:	90 95       	com	r25
     3d4:	9c 01       	movw	r18, r24
     3d6:	44 27       	eor	r20, r20
     3d8:	37 fd       	sbrc	r19, 7
     3da:	40 95       	com	r20
     3dc:	54 2f       	mov	r21, r20
     3de:	80 91 65 00 	lds	r24, 0x0065
     3e2:	90 91 66 00 	lds	r25, 0x0066
     3e6:	a0 91 67 00 	lds	r26, 0x0067
     3ea:	b0 91 68 00 	lds	r27, 0x0068
     3ee:	82 23       	and	r24, r18
     3f0:	93 23       	and	r25, r19
     3f2:	a4 23       	and	r26, r20
     3f4:	b5 23       	and	r27, r21
     3f6:	80 93 65 00 	sts	0x0065, r24
     3fa:	90 93 66 00 	sts	0x0066, r25
     3fe:	a0 93 67 00 	sts	0x0067, r26
     402:	b0 93 68 00 	sts	0x0068, r27
	shiftData &= ~(1 << (2*num + 1));
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	9c 01       	movw	r18, r24
     412:	2f 5f       	subi	r18, 0xFF	; 255
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <stopMotor+0x76>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	2a 95       	dec	r18
     422:	e2 f7       	brpl	.-8      	; 0x41c <stopMotor+0x72>
     424:	80 95       	com	r24
     426:	90 95       	com	r25
     428:	9c 01       	movw	r18, r24
     42a:	44 27       	eor	r20, r20
     42c:	37 fd       	sbrc	r19, 7
     42e:	40 95       	com	r20
     430:	54 2f       	mov	r21, r20
     432:	80 91 65 00 	lds	r24, 0x0065
     436:	90 91 66 00 	lds	r25, 0x0066
     43a:	a0 91 67 00 	lds	r26, 0x0067
     43e:	b0 91 68 00 	lds	r27, 0x0068
     442:	82 23       	and	r24, r18
     444:	93 23       	and	r25, r19
     446:	a4 23       	and	r26, r20
     448:	b5 23       	and	r27, r21
     44a:	80 93 65 00 	sts	0x0065, r24
     44e:	90 93 66 00 	sts	0x0066, r25
     452:	a0 93 67 00 	sts	0x0067, r26
     456:	b0 93 68 00 	sts	0x0068, r27

	shift(shiftData);
     45a:	80 91 65 00 	lds	r24, 0x0065
     45e:	90 91 66 00 	lds	r25, 0x0066
     462:	a0 91 67 00 	lds	r26, 0x0067
     466:	b0 91 68 00 	lds	r27, 0x0068
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <shift>
}
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <stopAll>:

void stopAll(){
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	shiftData = 0;
     482:	10 92 65 00 	sts	0x0065, r1
     486:	10 92 66 00 	sts	0x0066, r1
     48a:	10 92 67 00 	sts	0x0067, r1
     48e:	10 92 68 00 	sts	0x0068, r1
	shift(shiftData);
     492:	80 91 65 00 	lds	r24, 0x0065
     496:	90 91 66 00 	lds	r25, 0x0066
     49a:	a0 91 67 00 	lds	r26, 0x0067
     49e:	b0 91 68 00 	lds	r27, 0x0068
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <shift>
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <init_shift>:
 *  Created on: 26.11.2015
 *      Author: sascha
 */
#include "shift.h"

void init_shift(void){
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	SHIFT_DDR |= (1<< SHIFT_DATA) | (1<< SHIFT_CLK) | (1<< SHIFT_PS);
     4b8:	84 e3       	ldi	r24, 0x34	; 52
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	24 e3       	ldi	r18, 0x34	; 52
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	27 60       	ori	r18, 0x07	; 7
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <shift>:

void shift(uint32_t data){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <shift+0x6>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <shift+0x8>
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	6a 83       	std	Y+2, r22	; 0x02
     4e0:	7b 83       	std	Y+3, r23	; 0x03
     4e2:	8c 83       	std	Y+4, r24	; 0x04
     4e4:	9d 83       	std	Y+5, r25	; 0x05
	for(int8_t i = 31; i >= 0 ; i --){
     4e6:	8f e1       	ldi	r24, 0x1F	; 31
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	45 c0       	rjmp	.+138    	; 0x576 <shift+0xa6>
		if(data & (1 << i))
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	28 2f       	mov	r18, r24
     4f0:	33 27       	eor	r19, r19
     4f2:	27 fd       	sbrc	r18, 7
     4f4:	30 95       	com	r19
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <shift+0x30>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	2a 95       	dec	r18
     502:	e2 f7       	brpl	.-8      	; 0x4fc <shift+0x2c>
     504:	9c 01       	movw	r18, r24
     506:	44 27       	eor	r20, r20
     508:	37 fd       	sbrc	r19, 7
     50a:	40 95       	com	r20
     50c:	54 2f       	mov	r21, r20
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	ac 81       	ldd	r26, Y+4	; 0x04
     514:	bd 81       	ldd	r27, Y+5	; 0x05
     516:	82 23       	and	r24, r18
     518:	93 23       	and	r25, r19
     51a:	a4 23       	and	r26, r20
     51c:	b5 23       	and	r27, r21
     51e:	00 97       	sbiw	r24, 0x00	; 0
     520:	a1 05       	cpc	r26, r1
     522:	b1 05       	cpc	r27, r1
     524:	51 f0       	breq	.+20     	; 0x53a <shift+0x6a>
			SHIFT_PORT |= (1 << SHIFT_DATA);
     526:	85 e3       	ldi	r24, 0x35	; 53
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	25 e3       	ldi	r18, 0x35	; 53
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	24 60       	ori	r18, 0x04	; 4
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
     538:	09 c0       	rjmp	.+18     	; 0x54c <shift+0x7c>
		else
			SHIFT_PORT &= ~(1 << SHIFT_DATA);
     53a:	85 e3       	ldi	r24, 0x35	; 53
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	25 e3       	ldi	r18, 0x35	; 53
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	2b 7f       	andi	r18, 0xFB	; 251
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
		SHIFT_PORT |= (1 << SHIFT_CLK);
     54c:	85 e3       	ldi	r24, 0x35	; 53
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	25 e3       	ldi	r18, 0x35	; 53
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	21 60       	ori	r18, 0x01	; 1
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
		SHIFT_PORT &= ~(1 << SHIFT_CLK);
     55e:	85 e3       	ldi	r24, 0x35	; 53
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	25 e3       	ldi	r18, 0x35	; 53
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	2e 7f       	andi	r18, 0xFE	; 254
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
void init_shift(void){
	SHIFT_DDR |= (1<< SHIFT_DATA) | (1<< SHIFT_CLK) | (1<< SHIFT_PS);
}

void shift(uint32_t data){
	for(int8_t i = 31; i >= 0 ; i --){
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	81 50       	subi	r24, 0x01	; 1
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	88 23       	and	r24, r24
     57a:	0c f0       	brlt	.+2      	; 0x57e <shift+0xae>
     57c:	b7 cf       	rjmp	.-146    	; 0x4ec <shift+0x1c>
			SHIFT_PORT &= ~(1 << SHIFT_DATA);
		SHIFT_PORT |= (1 << SHIFT_CLK);
		SHIFT_PORT &= ~(1 << SHIFT_CLK);
	}

	SHIFT_PORT |= (1 << SHIFT_PS);
     57e:	85 e3       	ldi	r24, 0x35	; 53
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	25 e3       	ldi	r18, 0x35	; 53
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	f9 01       	movw	r30, r18
     588:	20 81       	ld	r18, Z
     58a:	22 60       	ori	r18, 0x02	; 2
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
	SHIFT_PORT |= (1 << SHIFT_CLK);
     590:	85 e3       	ldi	r24, 0x35	; 53
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	25 e3       	ldi	r18, 0x35	; 53
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	21 60       	ori	r18, 0x01	; 1
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
	SHIFT_PORT &= ~(1 << SHIFT_CLK);
     5a2:	85 e3       	ldi	r24, 0x35	; 53
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	25 e3       	ldi	r18, 0x35	; 53
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	2e 7f       	andi	r18, 0xFE	; 254
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
	SHIFT_PORT &= ~(1 << SHIFT_PS);
     5b4:	85 e3       	ldi	r24, 0x35	; 53
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	25 e3       	ldi	r18, 0x35	; 53
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	2d 7f       	andi	r18, 0xFD	; 253
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
}
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <initSPI>:
static volatile uint8_t oldData;
static volatile uint8_t counter;



void initSPI(){
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK) | (1 << DD_SS);
     5e0:	87 e3       	ldi	r24, 0x37	; 55
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2c e2       	ldi	r18, 0x2C	; 44
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	PORT_SPI |= (1 << DD_SS);
     5ea:	88 e3       	ldi	r24, 0x38	; 56
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	28 e3       	ldi	r18, 0x38	; 56
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	24 60       	ori	r18, 0x04	; 4
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	/* Enable SPI, Master, set clock rate fck/8, enable interrupt */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0) | (1 << SPI2X);
     5fc:	8d e2       	ldi	r24, 0x2D	; 45
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	21 e5       	ldi	r18, 0x51	; 81
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18

	for(uint8_t i = 0; i < CHANNEL; i ++){
     606:	19 82       	std	Y+1, r1	; 0x01
     608:	73 c0       	rjmp	.+230    	; 0x6f0 <initSPI+0x11a>
		adcData[i][OLD] = 0;
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	c9 01       	movw	r24, r18
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	82 1b       	sub	r24, r18
     620:	93 0b       	sbc	r25, r19
     622:	85 56       	subi	r24, 0x65	; 101
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	10 82       	st	Z, r1
		adcData[i][ACT] = 0;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	c9 01       	movw	r24, r18
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	82 1b       	sub	r24, r18
     640:	93 0b       	sbc	r25, r19
     642:	86 56       	subi	r24, 0x66	; 102
     644:	9f 4f       	sbci	r25, 0xFF	; 255
     646:	fc 01       	movw	r30, r24
     648:	10 82       	st	Z, r1
		adcData[i][CHANGED] = 0;
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	c9 01       	movw	r24, r18
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	82 1b       	sub	r24, r18
     660:	93 0b       	sbc	r25, r19
     662:	84 56       	subi	r24, 0x64	; 100
     664:	9f 4f       	sbci	r25, 0xFF	; 255
     666:	fc 01       	movw	r30, r24
     668:	10 82       	st	Z, r1
		adcData[i][NEWVALUEFLAG] = 0;
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	28 2f       	mov	r18, r24
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	c9 01       	movw	r24, r18
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	82 1b       	sub	r24, r18
     680:	93 0b       	sbc	r25, r19
     682:	83 56       	subi	r24, 0x63	; 99
     684:	9f 4f       	sbci	r25, 0xFF	; 255
     686:	fc 01       	movw	r30, r24
     688:	10 82       	st	Z, r1
		adcData[i][ADCNEWVALUE] = 0;
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	28 2f       	mov	r18, r24
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	c9 01       	movw	r24, r18
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	82 1b       	sub	r24, r18
     6a0:	93 0b       	sbc	r25, r19
     6a2:	82 56       	subi	r24, 0x62	; 98
     6a4:	9f 4f       	sbci	r25, 0xFF	; 255
     6a6:	fc 01       	movw	r30, r24
     6a8:	10 82       	st	Z, r1
		adcData[i][TEMPVALUE] = 0;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	28 2f       	mov	r18, r24
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	c9 01       	movw	r24, r18
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	82 1b       	sub	r24, r18
     6c0:	93 0b       	sbc	r25, r19
     6c2:	81 56       	subi	r24, 0x61	; 97
     6c4:	9f 4f       	sbci	r25, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	10 82       	st	Z, r1
		adcData[i][COUNTER] = 0;
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	c9 01       	movw	r24, r18
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	82 1b       	sub	r24, r18
     6e0:	93 0b       	sbc	r25, r19
     6e2:	80 56       	subi	r24, 0x60	; 96
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	fc 01       	movw	r30, r24
     6e8:	10 82       	st	Z, r1
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK) | (1 << DD_SS);
	PORT_SPI |= (1 << DD_SS);
	/* Enable SPI, Master, set clock rate fck/8, enable interrupt */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0) | (1 << SPI2X);

	for(uint8_t i = 0; i < CHANNEL; i ++){
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 23       	and	r24, r24
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <initSPI+0x122>
     6f6:	89 cf       	rjmp	.-238    	; 0x60a <initSPI+0x34>
		adcData[i][ADCNEWVALUE] = 0;
		adcData[i][TEMPVALUE] = 0;
		adcData[i][COUNTER] = 0;
	}

	sei();
     6f8:	78 94       	sei
}
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <startMeassure>:

//Start meassure
void startMeassure(){
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	1f 92       	push	r1
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
	//enable interrupt
	SPCR |= (1 << SPIE);
     70c:	8d e2       	ldi	r24, 0x2D	; 45
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	2d e2       	ldi	r18, 0x2D	; 45
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	20 81       	ld	r18, Z
     718:	20 68       	ori	r18, 0x80	; 128
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18

	//SS Wählen
	PORTB &= ~(1<<2);
     71e:	88 e3       	ldi	r24, 0x38	; 56
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	28 e3       	ldi	r18, 0x38	; 56
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	f9 01       	movw	r30, r18
     728:	20 81       	ld	r18, Z
     72a:	2b 7f       	andi	r18, 0xFB	; 251
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18

	//erstes Byte zum ADC senden
	uint8_t mask = 0b00000110;
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	89 83       	std	Y+1, r24	; 0x01

	SPDR = mask;
     734:	8f e2       	ldi	r24, 0x2F	; 47
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18

	//Entprellen vorbereiten
	counter = 10;
     73e:	8a e0       	ldi	r24, 0x0A	; 10
     740:	80 93 6e 00 	sts	0x006E, r24
	oldData = adcData[0][ACT];
     744:	80 91 9a 00 	lds	r24, 0x009A
     748:	80 93 6d 00 	sts	0x006D, r24
	state = 1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 6c 00 	sts	0x006C, r24
}
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <__vector_10>:

//interrupt, wenn fertig
ISR(SPI_STC_vect){
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	00 90 5f 00 	lds	r0, 0x005F
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	8f 93       	push	r24
     76e:	9f 93       	push	r25
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	00 d0       	rcall	.+0      	; 0x77a <__vector_10+0x20>
     77a:	1f 92       	push	r1
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pin = state / 3;
     780:	90 91 6c 00 	lds	r25, 0x006C
     784:	8b ea       	ldi	r24, 0xAB	; 171
     786:	98 9f       	mul	r25, r24
     788:	81 2d       	mov	r24, r1
     78a:	11 24       	eor	r1, r1
     78c:	86 95       	lsr	r24
     78e:	8b 83       	std	Y+3, r24	; 0x03
	if((state % 3) == 0){
     790:	20 91 6c 00 	lds	r18, 0x006C
     794:	8b ea       	ldi	r24, 0xAB	; 171
     796:	28 9f       	mul	r18, r24
     798:	81 2d       	mov	r24, r1
     79a:	11 24       	eor	r1, r1
     79c:	98 2f       	mov	r25, r24
     79e:	96 95       	lsr	r25
     7a0:	89 2f       	mov	r24, r25
     7a2:	88 0f       	add	r24, r24
     7a4:	89 0f       	add	r24, r25
     7a6:	92 2f       	mov	r25, r18
     7a8:	98 1b       	sub	r25, r24
     7aa:	99 23       	and	r25, r25
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <__vector_10+0x56>
     7ae:	67 c0       	rjmp	.+206    	; 0x87e <__vector_10+0x124>
		//letzte Rückgabe auswerten
		PORTB |= (1<<2);
     7b0:	88 e3       	ldi	r24, 0x38	; 56
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	28 e3       	ldi	r18, 0x38	; 56
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	f9 01       	movw	r30, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	24 60       	ori	r18, 0x04	; 4
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18

		meassure |= SPDR;
     7c2:	8f e2       	ldi	r24, 0x2F	; 47
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	28 2f       	mov	r18, r24
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	80 91 69 00 	lds	r24, 0x0069
     7d2:	90 91 6a 00 	lds	r25, 0x006A
     7d6:	82 2b       	or	r24, r18
     7d8:	93 2b       	or	r25, r19
     7da:	90 93 6a 00 	sts	0x006A, r25
     7de:	80 93 69 00 	sts	0x0069, r24

		uint8_t lastPin = CHANNEL - 1;
     7e2:	19 82       	std	Y+1, r1	; 0x01
		if(pin){
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	88 23       	and	r24, r24
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <__vector_10+0x96>
			lastPin = pin -1;
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	81 50       	subi	r24, 0x01	; 1
     7ee:	89 83       	std	Y+1, r24	; 0x01
		}
		adcData[lastPin][ADCNEWVALUE] = meassure >> 4;
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	80 91 69 00 	lds	r24, 0x0069
     7fa:	90 91 6a 00 	lds	r25, 0x006A
     7fe:	92 95       	swap	r25
     800:	82 95       	swap	r24
     802:	8f 70       	andi	r24, 0x0F	; 15
     804:	89 27       	eor	r24, r25
     806:	9f 70       	andi	r25, 0x0F	; 15
     808:	89 27       	eor	r24, r25
     80a:	48 2f       	mov	r20, r24
     80c:	c9 01       	movw	r24, r18
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	82 1b       	sub	r24, r18
     81c:	93 0b       	sbc	r25, r19
     81e:	82 56       	subi	r24, 0x62	; 98
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	fc 01       	movw	r30, r24
     824:	40 83       	st	Z, r20
		adcData[lastPin][NEWVALUEFLAG] = 1;
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	28 2f       	mov	r18, r24
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	c9 01       	movw	r24, r18
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	82 1b       	sub	r24, r18
     83c:	93 0b       	sbc	r25, r19
     83e:	83 56       	subi	r24, 0x63	; 99
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	21 e0       	ldi	r18, 0x01	; 1
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18

		//nächsten Wert speichern

		//SS Wählen
		PORTB &= ~(1<<2);
     848:	88 e3       	ldi	r24, 0x38	; 56
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	28 e3       	ldi	r18, 0x38	; 56
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	2b 7f       	andi	r18, 0xFB	; 251
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18

		//erstes Byte zum ADC senden
		uint8_t mask = 0b00000110;
     85a:	86 e0       	ldi	r24, 0x06	; 6
     85c:	8a 83       	std	Y+2, r24	; 0x02

		if(pin & (1 << 2))
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	84 70       	andi	r24, 0x04	; 4
     866:	99 27       	eor	r25, r25
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	19 f0       	breq	.+6      	; 0x872 <__vector_10+0x118>
			mask |= 1;
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	81 60       	ori	r24, 0x01	; 1
     870:	8a 83       	std	Y+2, r24	; 0x02

		SPDR = mask;
     872:	8f e2       	ldi	r24, 0x2F	; 47
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2a 81       	ldd	r18, Y+2	; 0x02
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
     87c:	33 c0       	rjmp	.+102    	; 0x8e4 <__vector_10+0x18a>
	}
	else if((state % 3) == 1){
     87e:	20 91 6c 00 	lds	r18, 0x006C
     882:	8b ea       	ldi	r24, 0xAB	; 171
     884:	28 9f       	mul	r18, r24
     886:	81 2d       	mov	r24, r1
     888:	11 24       	eor	r1, r1
     88a:	98 2f       	mov	r25, r24
     88c:	96 95       	lsr	r25
     88e:	89 2f       	mov	r24, r25
     890:	88 0f       	add	r24, r24
     892:	89 0f       	add	r24, r25
     894:	92 2f       	mov	r25, r18
     896:	98 1b       	sub	r25, r24
     898:	91 30       	cpi	r25, 0x01	; 1
     89a:	51 f4       	brne	.+20     	; 0x8b0 <__vector_10+0x156>
		SPDR = pin << 6;
     89c:	8f e2       	ldi	r24, 0x2F	; 47
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	2b 81       	ldd	r18, Y+3	; 0x03
     8a2:	22 95       	swap	r18
     8a4:	22 0f       	add	r18, r18
     8a6:	22 0f       	add	r18, r18
     8a8:	20 7c       	andi	r18, 0xC0	; 192
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	1a c0       	rjmp	.+52     	; 0x8e4 <__vector_10+0x18a>
	}
	else{
		meassure = (uint16_t)SPDR << 8;
     8b0:	8f e2       	ldi	r24, 0x2F	; 47
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	98 2f       	mov	r25, r24
     8be:	88 27       	eor	r24, r24
     8c0:	90 93 6a 00 	sts	0x006A, r25
     8c4:	80 93 69 00 	sts	0x0069, r24
		meassure = meassure & (0x0F00);
     8c8:	80 91 69 00 	lds	r24, 0x0069
     8cc:	90 91 6a 00 	lds	r25, 0x006A
     8d0:	88 27       	eor	r24, r24
     8d2:	9f 70       	andi	r25, 0x0F	; 15
     8d4:	90 93 6a 00 	sts	0x006A, r25
     8d8:	80 93 69 00 	sts	0x0069, r24
		SPDR = 0;
     8dc:	8f e2       	ldi	r24, 0x2F	; 47
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	fc 01       	movw	r30, r24
     8e2:	10 82       	st	Z, r1
	}
	state ++;
     8e4:	80 91 6c 00 	lds	r24, 0x006C
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	80 93 6c 00 	sts	0x006C, r24
	if(state == (CHANNEL * 3))
     8ee:	80 91 6c 00 	lds	r24, 0x006C
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	11 f4       	brne	.+4      	; 0x8fa <__vector_10+0x1a0>
		state = 0;
     8f6:	10 92 6c 00 	sts	0x006C, r1
}
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	ff 91       	pop	r31
     906:	ef 91       	pop	r30
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	00 92 5f 00 	sts	0x005F, r0
     918:	0f 90       	pop	r0
     91a:	1f 90       	pop	r1
     91c:	18 95       	reti

0000091e <newMessage>:

uint8_t newMessage(){
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
	return new;
     926:	80 91 6b 00 	lds	r24, 0x006B
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <getMeassure>:

uint8_t getMeassure(){
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
	new = 0;
     938:	10 92 6b 00 	sts	0x006B, r1
	return meassure;
     93c:	80 91 69 00 	lds	r24, 0x0069
     940:	90 91 6a 00 	lds	r25, 0x006A
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <readMeassure>:

/**
 * read measure of the ADC
 * this waits until message is receiving
 */
uint16_t readMeassure(uint8_t pin){
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	00 d0       	rcall	.+0      	; 0x950 <readMeassure+0x6>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	8a 83       	std	Y+2, r24	; 0x02
	PORTB &= ~(1<<2);
     956:	88 e3       	ldi	r24, 0x38	; 56
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	28 e3       	ldi	r18, 0x38	; 56
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	2b 7f       	andi	r18, 0xFB	; 251
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
	SPCR &= ~(1 << SPIE);
     968:	8d e2       	ldi	r24, 0x2D	; 45
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	2d e2       	ldi	r18, 0x2D	; 45
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	f9 01       	movw	r30, r18
     972:	20 81       	ld	r18, Z
     974:	2f 77       	andi	r18, 0x7F	; 127
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18

	uint8_t mask = 0b00000110;
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	89 83       	std	Y+1, r24	; 0x01

	if(pin & (1 << 2))
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	84 70       	andi	r24, 0x04	; 4
     986:	99 27       	eor	r25, r25
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	19 f0       	breq	.+6      	; 0x992 <readMeassure+0x48>
		mask |= 1;
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	89 83       	std	Y+1, r24	; 0x01

	SPDR = mask;
     992:	8f e2       	ldi	r24, 0x2F	; 47
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18

	while(!(SPSR & (1<<SPIF)));
     99c:	00 00       	nop
     99e:	8e e2       	ldi	r24, 0x2E	; 46
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	fc 01       	movw	r30, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	88 23       	and	r24, r24
     9a8:	d4 f7       	brge	.-12     	; 0x99e <readMeassure+0x54>
	SPDR = pin << 6;
     9aa:	8f e2       	ldi	r24, 0x2F	; 47
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	2a 81       	ldd	r18, Y+2	; 0x02
     9b0:	22 95       	swap	r18
     9b2:	22 0f       	add	r18, r18
     9b4:	22 0f       	add	r18, r18
     9b6:	20 7c       	andi	r18, 0xC0	; 192
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18

	while(!(SPSR & (1<<SPIF)));
     9bc:	00 00       	nop
     9be:	8e e2       	ldi	r24, 0x2E	; 46
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	88 23       	and	r24, r24
     9c8:	d4 f7       	brge	.-12     	; 0x9be <readMeassure+0x74>
	meassure = (uint16_t)SPDR << 8;
     9ca:	8f e2       	ldi	r24, 0x2F	; 47
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	88 2f       	mov	r24, r24
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	98 2f       	mov	r25, r24
     9d8:	88 27       	eor	r24, r24
     9da:	90 93 6a 00 	sts	0x006A, r25
     9de:	80 93 69 00 	sts	0x0069, r24
	meassure = meassure & (0x0F00);
     9e2:	80 91 69 00 	lds	r24, 0x0069
     9e6:	90 91 6a 00 	lds	r25, 0x006A
     9ea:	88 27       	eor	r24, r24
     9ec:	9f 70       	andi	r25, 0x0F	; 15
     9ee:	90 93 6a 00 	sts	0x006A, r25
     9f2:	80 93 69 00 	sts	0x0069, r24
	SPDR = 0;
     9f6:	8f e2       	ldi	r24, 0x2F	; 47
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	fc 01       	movw	r30, r24
     9fc:	10 82       	st	Z, r1

	while(!(SPSR & (1<<SPIF)));
     9fe:	00 00       	nop
     a00:	8e e2       	ldi	r24, 0x2E	; 46
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fc 01       	movw	r30, r24
     a06:	80 81       	ld	r24, Z
     a08:	88 23       	and	r24, r24
     a0a:	d4 f7       	brge	.-12     	; 0xa00 <readMeassure+0xb6>
	meassure |= SPDR;
     a0c:	8f e2       	ldi	r24, 0x2F	; 47
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	28 2f       	mov	r18, r24
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	80 91 69 00 	lds	r24, 0x0069
     a1c:	90 91 6a 00 	lds	r25, 0x006A
     a20:	82 2b       	or	r24, r18
     a22:	93 2b       	or	r25, r19
     a24:	90 93 6a 00 	sts	0x006A, r25
     a28:	80 93 69 00 	sts	0x0069, r24

	PORTB |= (1<<2);
     a2c:	88 e3       	ldi	r24, 0x38	; 56
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	28 e3       	ldi	r18, 0x38	; 56
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	24 60       	ori	r18, 0x04	; 4
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
	return meassure;
     a3e:	80 91 69 00 	lds	r24, 0x0069
     a42:	90 91 6a 00 	lds	r25, 0x006A
}
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <initFader>:

/*
 * initialisert Fader
 * soll 100 Schritte fahren
 */
void initFader(void){
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <initFader+0x6>
     a56:	1f 92       	push	r1
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i = 0; i < CHANNEL; i ++){
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	d7 c0       	rjmp	.+430    	; 0xc0e <initFader+0x1be>
		uint8_t mask = 0;
     a60:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t startValue = readFader(i, &mask);
     a62:	ce 01       	movw	r24, r28
     a64:	03 96       	adiw	r24, 0x03	; 3
     a66:	bc 01       	movw	r22, r24
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <readFader>
     a6e:	8a 83       	std	Y+2, r24	; 0x02
		if(startValue > 122){
     a70:	8a 81       	ldd	r24, Y+2	; 0x02
     a72:	8b 37       	cpi	r24, 0x7B	; 123
     a74:	b8 f1       	brcs	.+110    	; 0xae4 <initFader+0x94>
			fader[i].position = startValue - 100;
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	2a 81       	ldd	r18, Y+2	; 0x02
     a7e:	4c e9       	ldi	r20, 0x9C	; 156
     a80:	42 0f       	add	r20, r18
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	9c 01       	movw	r18, r24
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	8f 55       	subi	r24, 0x5F	; 95
     a96:	9f 4f       	sbci	r25, 0xFF	; 255
     a98:	fc 01       	movw	r30, r24
     a9a:	40 83       	st	Z, r20
			fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	28 2f       	mov	r18, r24
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	ac 01       	movw	r20, r24
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	44 0f       	add	r20, r20
     ab4:	55 1f       	adc	r21, r21
     ab6:	84 0f       	add	r24, r20
     ab8:	95 1f       	adc	r25, r21
     aba:	86 55       	subi	r24, 0x56	; 86
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	48 2f       	mov	r20, r24
     ac4:	4e 7f       	andi	r20, 0xFE	; 254
     ac6:	c9 01       	movw	r24, r18
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	9c 01       	movw	r18, r24
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	82 0f       	add	r24, r18
     ad8:	93 1f       	adc	r25, r19
     ada:	86 55       	subi	r24, 0x56	; 86
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	fc 01       	movw	r30, r24
     ae0:	40 83       	st	Z, r20
     ae2:	23 c0       	rjmp	.+70     	; 0xb2a <initFader+0xda>
		} else {
			fader[i].flag |= (1<<DIRECTION);	//vorlaufen
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	28 2f       	mov	r18, r24
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	88 2f       	mov	r24, r24
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	ac 01       	movw	r20, r24
     af6:	44 0f       	add	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	44 0f       	add	r20, r20
     afc:	55 1f       	adc	r21, r21
     afe:	84 0f       	add	r24, r20
     b00:	95 1f       	adc	r25, r21
     b02:	86 55       	subi	r24, 0x56	; 86
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	48 2f       	mov	r20, r24
     b0c:	41 60       	ori	r20, 0x01	; 1
     b0e:	c9 01       	movw	r24, r18
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	9c 01       	movw	r18, r24
     b16:	22 0f       	add	r18, r18
     b18:	33 1f       	adc	r19, r19
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	82 0f       	add	r24, r18
     b20:	93 1f       	adc	r25, r19
     b22:	86 55       	subi	r24, 0x56	; 86
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	fc 01       	movw	r30, r24
     b28:	40 83       	st	Z, r20
		}

		fader[i].flag |= (1<<INITIALIZE);
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	28 2f       	mov	r18, r24
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	ac 01       	movw	r20, r24
     b3c:	44 0f       	add	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	44 0f       	add	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	84 0f       	add	r24, r20
     b46:	95 1f       	adc	r25, r21
     b48:	86 55       	subi	r24, 0x56	; 86
     b4a:	9f 4f       	sbci	r25, 0xFF	; 255
     b4c:	fc 01       	movw	r30, r24
     b4e:	80 81       	ld	r24, Z
     b50:	48 2f       	mov	r20, r24
     b52:	42 60       	ori	r20, 0x02	; 2
     b54:	c9 01       	movw	r24, r18
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	9c 01       	movw	r18, r24
     b5c:	22 0f       	add	r18, r18
     b5e:	33 1f       	adc	r19, r19
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	86 55       	subi	r24, 0x56	; 86
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	fc 01       	movw	r30, r24
     b6e:	40 83       	st	Z, r20
		fader[i].startposition = 0;
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	9c 01       	movw	r18, r24
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	8e 55       	subi	r24, 0x5E	; 94
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	fc 01       	movw	r30, r24
     b8e:	10 82       	st	Z, r1
		fader[i].cycles = 65530;
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	9c 01       	movw	r18, r24
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	82 0f       	add	r24, r18
     ba6:	93 1f       	adc	r25, r19
     ba8:	89 55       	subi	r24, 0x59	; 89
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	2a ef       	ldi	r18, 0xFA	; 250
     bae:	3f ef       	ldi	r19, 0xFF	; 255
     bb0:	fc 01       	movw	r30, r24
     bb2:	31 83       	std	Z+1, r19	; 0x01
     bb4:	20 83       	st	Z, r18
		fader[i].factor = STARTFACTOR;
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	9c 01       	movw	r18, r24
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	22 0f       	add	r18, r18
     bc8:	33 1f       	adc	r19, r19
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	9c 01       	movw	r18, r24
     bd0:	2d 55       	subi	r18, 0x5D	; 93
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e4       	ldi	r25, 0x40	; 64
     bd8:	ac e1       	ldi	r26, 0x1C	; 28
     bda:	b6 e4       	ldi	r27, 0x46	; 70
     bdc:	f9 01       	movw	r30, r18
     bde:	80 83       	st	Z, r24
     be0:	91 83       	std	Z+1, r25	; 0x01
     be2:	a2 83       	std	Z+2, r26	; 0x02
     be4:	b3 83       	std	Z+3, r27	; 0x03
		fader[i].mode = WAITFORRUN;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	9c 01       	movw	r18, r24
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	87 55       	subi	r24, 0x57	; 87
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	24 e0       	ldi	r18, 0x04	; 4
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
/*
 * initialisert Fader
 * soll 100 Schritte fahren
 */
void initFader(void){
	for(uint8_t i = 0; i < CHANNEL; i ++){
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	88 23       	and	r24, r24
     c12:	09 f4       	brne	.+2      	; 0xc16 <initFader+0x1c6>
     c14:	25 cf       	rjmp	.-438    	; 0xa60 <initFader+0x10>
		fader[i].cycles = 65530;
		fader[i].factor = STARTFACTOR;
		fader[i].mode = WAITFORRUN;
	}

	numFaderRunning = 0;
     c16:	10 92 6f 00 	sts	0x006F, r1

	// Timer 0 konfigurieren
	TCCR1B = 0;
     c1a:	8e e4       	ldi	r24, 0x4E	; 78
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	10 82       	st	Z, r1
	OCR1A = 18432;
     c22:	8a e4       	ldi	r24, 0x4A	; 74
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	38 e4       	ldi	r19, 0x48	; 72
     c2a:	fc 01       	movw	r30, r24
     c2c:	31 83       	std	Z+1, r19	; 0x01
     c2e:	20 83       	st	Z, r18
	TIMSK |= (1<<OCIE1A);
     c30:	89 e5       	ldi	r24, 0x59	; 89
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	29 e5       	ldi	r18, 0x59	; 89
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	20 61       	ori	r18, 0x10	; 16
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18

	// Global Interrupts aktivieren
	sei();
     c42:	78 94       	sei
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <workFader>:

void workFader(void){
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	2f 97       	sbiw	r28, 0x0f	; 15
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
	for(uint8_t i = 0; i < CHANNEL; i ++){
     c70:	19 82       	std	Y+1, r1	; 0x01
     c72:	0f c4       	rjmp	.+2078   	; 0x1492 <workFader+0x842>
				while (!(UCSRA & (1<<UDRE)))  // warten bis Senden moeglich
									{
									}
								UDR = adcData[i][ACT];*/

		switch(fader[i].mode){
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	9c 01       	movw	r18, r24
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	87 55       	subi	r24, 0x57	; 87
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	88 2f       	mov	r24, r24
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <workFader+0x50>
     c9e:	9d c0       	rjmp	.+314    	; 0xdda <workFader+0x18a>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	91 05       	cpc	r25, r1
     ca4:	24 f4       	brge	.+8      	; 0xcae <workFader+0x5e>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	91 05       	cpc	r25, r1
     caa:	49 f0       	breq	.+18     	; 0xcbe <workFader+0x6e>
     cac:	ef c3       	rjmp	.+2014   	; 0x148c <workFader+0x83c>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	91 05       	cpc	r25, r1
     cb2:	29 f0       	breq	.+10     	; 0xcbe <workFader+0x6e>
     cb4:	86 30       	cpi	r24, 0x06	; 6
     cb6:	91 05       	cpc	r25, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <workFader+0x6c>
     cba:	4b c2       	rjmp	.+1174   	; 0x1152 <workFader+0x502>
     cbc:	e7 c3       	rjmp	.+1998   	; 0x148c <workFader+0x83c>
			case WAITFORTEST:
			case WAITFORRUN:
				//wenn noch ein fader arbeiten darf und dieser auch noch zyklen hat
				if(numFaderRunning < PARALLELFADER && fader[i].cycles > 0){
     cbe:	80 91 6f 00 	lds	r24, 0x006F
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <workFader+0x78>
     cc6:	88 c0       	rjmp	.+272    	; 0xdd8 <workFader+0x188>
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	9c 01       	movw	r18, r24
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	82 0f       	add	r24, r18
     cde:	93 1f       	adc	r25, r19
     ce0:	89 55       	subi	r24, 0x59	; 89
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	09 f4       	brne	.+2      	; 0xcf0 <workFader+0xa0>
     cee:	74 c0       	rjmp	.+232    	; 0xdd8 <workFader+0x188>

					if(fader[i].mode == WAITFORTEST)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	9c 01       	movw	r18, r24
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	82 0f       	add	r24, r18
     d06:	93 1f       	adc	r25, r19
     d08:	87 55       	subi	r24, 0x57	; 87
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	fc 01       	movw	r30, r24
     d0e:	80 81       	ld	r24, Z
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	91 f4       	brne	.+36     	; 0xd38 <workFader+0xe8>
						fader[i].mode = TESTIMPULS;
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	9c 01       	movw	r18, r24
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	82 0f       	add	r24, r18
     d2a:	93 1f       	adc	r25, r19
     d2c:	87 55       	subi	r24, 0x57	; 87
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
     d36:	11 c0       	rjmp	.+34     	; 0xd5a <workFader+0x10a>
					else
						fader[i].mode = RUN;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	9c 01       	movw	r18, r24
     d44:	22 0f       	add	r18, r18
     d46:	33 1f       	adc	r19, r19
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	82 0f       	add	r24, r18
     d4e:	93 1f       	adc	r25, r19
     d50:	87 55       	subi	r24, 0x57	; 87
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	25 e0       	ldi	r18, 0x05	; 5
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
					fader[i].startposition = adcData[i][ACT];
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	48 2f       	mov	r20, r24
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	c9 01       	movw	r24, r18
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	82 1b       	sub	r24, r18
     d76:	93 0b       	sbc	r25, r19
     d78:	86 56       	subi	r24, 0x66	; 102
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	fc 01       	movw	r30, r24
     d7e:	60 81       	ld	r22, Z
     d80:	ca 01       	movw	r24, r20
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	9c 01       	movw	r18, r24
     d88:	22 0f       	add	r18, r18
     d8a:	33 1f       	adc	r19, r19
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	82 0f       	add	r24, r18
     d92:	93 1f       	adc	r25, r19
     d94:	8e 55       	subi	r24, 0x5E	; 94
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	fc 01       	movw	r30, r24
     d9a:	60 83       	st	Z, r22
					setTimer(i);
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <setTimer>
					startMotor(i,fader[i].flag & (1<<DIRECTION));
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	9c 01       	movw	r18, r24
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	86 55       	subi	r24, 0x56	; 86
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	81 70       	andi	r24, 0x01	; 1
     dc4:	68 2f       	mov	r22, r24
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	0e 94 18 01 	call	0x230	; 0x230 <startMotor>
					numFaderRunning ++;
     dcc:	80 91 6f 00 	lds	r24, 0x006F
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	80 93 6f 00 	sts	0x006F, r24
				}
				break;
     dd6:	5a c3       	rjmp	.+1716   	; 0x148c <workFader+0x83c>
     dd8:	59 c3       	rjmp	.+1714   	; 0x148c <workFader+0x83c>
			case TESTEVALUATION:
				//wenn fader festgehalten wird
				if(((fader[i].flag & (1<<DIRECTION) )&& (adcData[i][ACT] < (fader[i].startposition + 9)))
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	9c 01       	movw	r18, r24
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	86 55       	subi	r24, 0x56	; 86
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	99 27       	eor	r25, r25
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	41 f1       	breq	.+80     	; 0xe56 <workFader+0x206>
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	c9 01       	movw	r24, r18
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	82 1b       	sub	r24, r18
     e1c:	93 0b       	sbc	r25, r19
     e1e:	86 56       	subi	r24, 0x66	; 102
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	fc 01       	movw	r30, r24
     e24:	80 81       	ld	r24, Z
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	ac 01       	movw	r20, r24
     e36:	44 0f       	add	r20, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	44 0f       	add	r20, r20
     e3c:	55 1f       	adc	r21, r21
     e3e:	84 0f       	add	r24, r20
     e40:	95 1f       	adc	r25, r21
     e42:	8e 55       	subi	r24, 0x5E	; 94
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	09 96       	adiw	r24, 0x09	; 9
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	e4 f1       	brlt	.+120    	; 0xece <workFader+0x27e>
						|| ((!fader[i].flag & (1<<DIRECTION)) && (adcData[i][ACT] > (fader[i].startposition - 9)))){
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	9c 01       	movw	r18, r24
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	86 55       	subi	r24, 0x56	; 86
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	88 23       	and	r24, r24
     e78:	09 f0       	breq	.+2      	; 0xe7c <workFader+0x22c>
     e7a:	72 c0       	rjmp	.+228    	; 0xf60 <workFader+0x310>
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	c9 01       	movw	r24, r18
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	82 1b       	sub	r24, r18
     e92:	93 0b       	sbc	r25, r19
     e94:	86 56       	subi	r24, 0x66	; 102
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	ac 01       	movw	r20, r24
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	44 0f       	add	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	84 0f       	add	r24, r20
     eb6:	95 1f       	adc	r25, r21
     eb8:	8e 55       	subi	r24, 0x5E	; 94
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	fc 01       	movw	r30, r24
     ebe:	80 81       	ld	r24, Z
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	09 97       	sbiw	r24, 0x09	; 9
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	0c f0       	brlt	.+2      	; 0xece <workFader+0x27e>
     ecc:	49 c0       	rjmp	.+146    	; 0xf60 <workFader+0x310>
					fader[i].startposition = adcData[i][ACT];
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	48 2f       	mov	r20, r24
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	c9 01       	movw	r24, r18
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	82 1b       	sub	r24, r18
     eea:	93 0b       	sbc	r25, r19
     eec:	86 56       	subi	r24, 0x66	; 102
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	fc 01       	movw	r30, r24
     ef2:	60 81       	ld	r22, Z
     ef4:	ca 01       	movw	r24, r20
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	9c 01       	movw	r18, r24
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	8e 55       	subi	r24, 0x5E	; 94
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	fc 01       	movw	r30, r24
     f0e:	60 83       	st	Z, r22
					fader[i].mode = SLEEP;
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	9c 01       	movw	r18, r24
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	87 55       	subi	r24, 0x57	; 87
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	27 e0       	ldi	r18, 0x07	; 7
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18
					fader[i].cycles = SLEEPCYCLES;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	9c 01       	movw	r18, r24
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	82 0f       	add	r24, r18
     f48:	93 1f       	adc	r25, r19
     f4a:	89 55       	subi	r24, 0x59	; 89
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	20 e1       	ldi	r18, 0x10	; 16
     f50:	37 e2       	ldi	r19, 0x27	; 39
     f52:	fc 01       	movw	r30, r24
     f54:	31 83       	std	Z+1, r19	; 0x01
     f56:	20 83       	st	Z, r18

					setTimer(i);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <setTimer>
						fader[i].cycles = fader[i].factor * ((fader[i].startposition - 10) - fader[i].position);
					else
						fader[i].cycles = fader[i].factor * (fader[i].position - (fader[i].startposition + 10));
					fader[i].mode = WAITFORRUN;
				}
				break;
     f5e:	96 c2       	rjmp	.+1324   	; 0x148c <workFader+0x83c>

					setTimer(i);

				} else {
					//Wenn Motor zurückläuft
					if(!fader[i].flag & (1<<DIRECTION))
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	9c 01       	movw	r18, r24
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	86 55       	subi	r24, 0x56	; 86
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	fc 01       	movw	r30, r24
     f7e:	80 81       	ld	r24, Z
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <workFader+0x336>
     f84:	6a c0       	rjmp	.+212    	; 0x105a <workFader+0x40a>
						fader[i].cycles = fader[i].factor * ((fader[i].startposition - 10) - fader[i].position);
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	08 2f       	mov	r16, r24
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	9c 01       	movw	r18, r24
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	22 0f       	add	r18, r18
     f9e:	33 1f       	adc	r19, r19
     fa0:	82 0f       	add	r24, r18
     fa2:	93 1f       	adc	r25, r19
     fa4:	8d 55       	subi	r24, 0x5D	; 93
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	fc 01       	movw	r30, r24
     faa:	c0 80       	ld	r12, Z
     fac:	d1 80       	ldd	r13, Z+1	; 0x01
     fae:	e2 80       	ldd	r14, Z+2	; 0x02
     fb0:	f3 80       	ldd	r15, Z+3	; 0x03
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	9c 01       	movw	r18, r24
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	8e 55       	subi	r24, 0x5E	; 94
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9c 01       	movw	r18, r24
     fd8:	2a 50       	subi	r18, 0x0A	; 10
     fda:	31 09       	sbc	r19, r1
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	ac 01       	movw	r20, r24
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	44 0f       	add	r20, r20
     fee:	55 1f       	adc	r21, r21
     ff0:	84 0f       	add	r24, r20
     ff2:	95 1f       	adc	r25, r21
     ff4:	8f 55       	subi	r24, 0x5F	; 95
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	48 1b       	sub	r20, r24
    1004:	59 0b       	sbc	r21, r25
    1006:	ca 01       	movw	r24, r20
    1008:	aa 27       	eor	r26, r26
    100a:	97 fd       	sbrc	r25, 7
    100c:	a0 95       	com	r26
    100e:	ba 2f       	mov	r27, r26
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9c 01       	movw	r18, r24
    101e:	ad 01       	movw	r20, r26
    1020:	c7 01       	movw	r24, r14
    1022:	b6 01       	movw	r22, r12
    1024:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 01       	movw	r18, r24
    103a:	c8 01       	movw	r24, r16
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	ac 01       	movw	r20, r24
    1042:	44 0f       	add	r20, r20
    1044:	55 1f       	adc	r21, r21
    1046:	44 0f       	add	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	84 0f       	add	r24, r20
    104c:	95 1f       	adc	r25, r21
    104e:	89 55       	subi	r24, 0x59	; 89
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	fc 01       	movw	r30, r24
    1054:	31 83       	std	Z+1, r19	; 0x01
    1056:	20 83       	st	Z, r18
    1058:	6a c0       	rjmp	.+212    	; 0x112e <workFader+0x4de>
					else
						fader[i].cycles = fader[i].factor * (fader[i].position - (fader[i].startposition + 10));
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	08 2f       	mov	r16, r24
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	9c 01       	movw	r18, r24
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	8d 55       	subi	r24, 0x5D	; 93
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	fc 01       	movw	r30, r24
    107e:	c0 80       	ld	r12, Z
    1080:	d1 80       	ldd	r13, Z+1	; 0x01
    1082:	e2 80       	ldd	r14, Z+2	; 0x02
    1084:	f3 80       	ldd	r15, Z+3	; 0x03
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	9c 01       	movw	r18, r24
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	82 0f       	add	r24, r18
    109c:	93 1f       	adc	r25, r19
    109e:	8f 55       	subi	r24, 0x5F	; 95
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	ac 01       	movw	r20, r24
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	44 0f       	add	r20, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	84 0f       	add	r24, r20
    10c0:	95 1f       	adc	r25, r21
    10c2:	8e 55       	subi	r24, 0x5E	; 94
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	fc 01       	movw	r30, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	46 ef       	ldi	r20, 0xF6	; 246
    10d0:	5f ef       	ldi	r21, 0xFF	; 255
    10d2:	ba 01       	movw	r22, r20
    10d4:	68 1b       	sub	r22, r24
    10d6:	79 0b       	sbc	r23, r25
    10d8:	cb 01       	movw	r24, r22
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	aa 27       	eor	r26, r26
    10e0:	97 fd       	sbrc	r25, 7
    10e2:	a0 95       	com	r26
    10e4:	ba 2f       	mov	r27, r26
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9c 01       	movw	r18, r24
    10f4:	ad 01       	movw	r20, r26
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	9c 01       	movw	r18, r24
    1110:	c8 01       	movw	r24, r16
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	ac 01       	movw	r20, r24
    1118:	44 0f       	add	r20, r20
    111a:	55 1f       	adc	r21, r21
    111c:	44 0f       	add	r20, r20
    111e:	55 1f       	adc	r21, r21
    1120:	84 0f       	add	r24, r20
    1122:	95 1f       	adc	r25, r21
    1124:	89 55       	subi	r24, 0x59	; 89
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	fc 01       	movw	r30, r24
    112a:	31 83       	std	Z+1, r19	; 0x01
    112c:	20 83       	st	Z, r18
					fader[i].mode = WAITFORRUN;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	9c 01       	movw	r18, r24
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	22 0f       	add	r18, r18
    1140:	33 1f       	adc	r19, r19
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	87 55       	subi	r24, 0x57	; 87
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	24 e0       	ldi	r18, 0x04	; 4
    114c:	fc 01       	movw	r30, r24
    114e:	20 83       	st	Z, r18
				}
				break;
    1150:	9d c1       	rjmp	.+826    	; 0x148c <workFader+0x83c>
			case ENDCONTROLL:
				if(adcData[i][ACT] == fader[i].position)
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	c9 01       	movw	r24, r18
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	82 1b       	sub	r24, r18
    1168:	93 0b       	sbc	r25, r19
    116a:	86 56       	subi	r24, 0x66	; 102
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	fc 01       	movw	r30, r24
    1170:	40 81       	ld	r20, Z
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	9c 01       	movw	r18, r24
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	22 0f       	add	r18, r18
    1184:	33 1f       	adc	r19, r19
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	8f 55       	subi	r24, 0x5F	; 95
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	fc 01       	movw	r30, r24
    1190:	80 81       	ld	r24, Z
    1192:	48 17       	cp	r20, r24
    1194:	89 f4       	brne	.+34     	; 0x11b8 <workFader+0x568>
					fader[i].mode = READY;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	9c 01       	movw	r18, r24
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	87 55       	subi	r24, 0x57	; 87
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	fc 01       	movw	r30, r24
    11b4:	10 82       	st	Z, r1
    11b6:	69 c1       	rjmp	.+722    	; 0x148a <workFader+0x83a>
				else {
					fader[i].startposition = adcData[i][ACT];
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	48 2f       	mov	r20, r24
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	c9 01       	movw	r24, r18
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	82 1b       	sub	r24, r18
    11d4:	93 0b       	sbc	r25, r19
    11d6:	86 56       	subi	r24, 0x66	; 102
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	fc 01       	movw	r30, r24
    11dc:	60 81       	ld	r22, Z
    11de:	ca 01       	movw	r24, r20
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	9c 01       	movw	r18, r24
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	8e 55       	subi	r24, 0x5E	; 94
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	fc 01       	movw	r30, r24
    11f8:	60 83       	st	Z, r22
					fader[i].mode = WAITFORRUN;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	9c 01       	movw	r18, r24
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	87 55       	subi	r24, 0x57	; 87
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	24 e0       	ldi	r18, 0x04	; 4
    1218:	fc 01       	movw	r30, r24
    121a:	20 83       	st	Z, r18

					if(adcData[i][ACT] < fader[i].position){
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	c9 01       	movw	r24, r18
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	82 1b       	sub	r24, r18
    1232:	93 0b       	sbc	r25, r19
    1234:	86 56       	subi	r24, 0x66	; 102
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	fc 01       	movw	r30, r24
    123a:	40 81       	ld	r20, Z
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	9c 01       	movw	r18, r24
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	8f 55       	subi	r24, 0x5F	; 95
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	48 17       	cp	r20, r24
    125e:	08 f0       	brcs	.+2      	; 0x1262 <workFader+0x612>
    1260:	8a c0       	rjmp	.+276    	; 0x1376 <workFader+0x726>
						fader[i].flag |= (1<<DIRECTION);	//vorlaufen
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	ac 01       	movw	r20, r24
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	44 0f       	add	r20, r20
    127a:	55 1f       	adc	r21, r21
    127c:	84 0f       	add	r24, r20
    127e:	95 1f       	adc	r25, r21
    1280:	86 55       	subi	r24, 0x56	; 86
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	fc 01       	movw	r30, r24
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	41 60       	ori	r20, 0x01	; 1
    128c:	c9 01       	movw	r24, r18
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	9c 01       	movw	r18, r24
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	82 0f       	add	r24, r18
    129e:	93 1f       	adc	r25, r19
    12a0:	86 55       	subi	r24, 0x56	; 86
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	fc 01       	movw	r30, r24
    12a6:	40 83       	st	Z, r20
						fader[i].cycles = fader[i].factor * (fader[i].position - fader[i].startposition);
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	08 2f       	mov	r16, r24
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	9c 01       	movw	r18, r24
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	22 0f       	add	r18, r18
    12c0:	33 1f       	adc	r19, r19
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	8d 55       	subi	r24, 0x5D	; 93
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	fc 01       	movw	r30, r24
    12cc:	c0 80       	ld	r12, Z
    12ce:	d1 80       	ldd	r13, Z+1	; 0x01
    12d0:	e2 80       	ldd	r14, Z+2	; 0x02
    12d2:	f3 80       	ldd	r15, Z+3	; 0x03
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	9c 01       	movw	r18, r24
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	8f 55       	subi	r24, 0x5F	; 95
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	fc 01       	movw	r30, r24
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	ac 01       	movw	r20, r24
    1304:	44 0f       	add	r20, r20
    1306:	55 1f       	adc	r21, r21
    1308:	44 0f       	add	r20, r20
    130a:	55 1f       	adc	r21, r21
    130c:	84 0f       	add	r24, r20
    130e:	95 1f       	adc	r25, r21
    1310:	8e 55       	subi	r24, 0x5E	; 94
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	fc 01       	movw	r30, r24
    1316:	80 81       	ld	r24, Z
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a9 01       	movw	r20, r18
    131e:	48 1b       	sub	r20, r24
    1320:	59 0b       	sbc	r21, r25
    1322:	ca 01       	movw	r24, r20
    1324:	aa 27       	eor	r26, r26
    1326:	97 fd       	sbrc	r25, 7
    1328:	a0 95       	com	r26
    132a:	ba 2f       	mov	r27, r26
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9c 01       	movw	r18, r24
    133a:	ad 01       	movw	r20, r26
    133c:	c7 01       	movw	r24, r14
    133e:	b6 01       	movw	r22, r12
    1340:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9c 01       	movw	r18, r24
    1356:	c8 01       	movw	r24, r16
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	ac 01       	movw	r20, r24
    135e:	44 0f       	add	r20, r20
    1360:	55 1f       	adc	r21, r21
    1362:	44 0f       	add	r20, r20
    1364:	55 1f       	adc	r21, r21
    1366:	84 0f       	add	r24, r20
    1368:	95 1f       	adc	r25, r21
    136a:	89 55       	subi	r24, 0x59	; 89
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	fc 01       	movw	r30, r24
    1370:	31 83       	std	Z+1, r19	; 0x01
    1372:	20 83       	st	Z, r18
    1374:	8a c0       	rjmp	.+276    	; 0x148a <workFader+0x83a>
					}
					else {
						fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	ac 01       	movw	r20, r24
    1388:	44 0f       	add	r20, r20
    138a:	55 1f       	adc	r21, r21
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	84 0f       	add	r24, r20
    1392:	95 1f       	adc	r25, r21
    1394:	86 55       	subi	r24, 0x56	; 86
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	fc 01       	movw	r30, r24
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	4e 7f       	andi	r20, 0xFE	; 254
    13a0:	c9 01       	movw	r24, r18
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	9c 01       	movw	r18, r24
    13a8:	22 0f       	add	r18, r18
    13aa:	33 1f       	adc	r19, r19
    13ac:	22 0f       	add	r18, r18
    13ae:	33 1f       	adc	r19, r19
    13b0:	82 0f       	add	r24, r18
    13b2:	93 1f       	adc	r25, r19
    13b4:	86 55       	subi	r24, 0x56	; 86
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	fc 01       	movw	r30, r24
    13ba:	40 83       	st	Z, r20
						fader[i].cycles = fader[i].factor * (fader[i].startposition - fader[i].position);
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	08 2f       	mov	r16, r24
    13c0:	10 e0       	ldi	r17, 0x00	; 0
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	9c 01       	movw	r18, r24
    13ce:	22 0f       	add	r18, r18
    13d0:	33 1f       	adc	r19, r19
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	82 0f       	add	r24, r18
    13d8:	93 1f       	adc	r25, r19
    13da:	8d 55       	subi	r24, 0x5D	; 93
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	fc 01       	movw	r30, r24
    13e0:	c0 80       	ld	r12, Z
    13e2:	d1 80       	ldd	r13, Z+1	; 0x01
    13e4:	e2 80       	ldd	r14, Z+2	; 0x02
    13e6:	f3 80       	ldd	r15, Z+3	; 0x03
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	9c 01       	movw	r18, r24
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	8e 55       	subi	r24, 0x5E	; 94
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	ac 01       	movw	r20, r24
    1418:	44 0f       	add	r20, r20
    141a:	55 1f       	adc	r21, r21
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	84 0f       	add	r24, r20
    1422:	95 1f       	adc	r25, r21
    1424:	8f 55       	subi	r24, 0x5F	; 95
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	48 1b       	sub	r20, r24
    1434:	59 0b       	sbc	r21, r25
    1436:	ca 01       	movw	r24, r20
    1438:	aa 27       	eor	r26, r26
    143a:	97 fd       	sbrc	r25, 7
    143c:	a0 95       	com	r26
    143e:	ba 2f       	mov	r27, r26
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9c 01       	movw	r18, r24
    144e:	ad 01       	movw	r20, r26
    1450:	c7 01       	movw	r24, r14
    1452:	b6 01       	movw	r22, r12
    1454:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9c 01       	movw	r18, r24
    146a:	c8 01       	movw	r24, r16
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	ac 01       	movw	r20, r24
    1472:	44 0f       	add	r20, r20
    1474:	55 1f       	adc	r21, r21
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	84 0f       	add	r24, r20
    147c:	95 1f       	adc	r25, r21
    147e:	89 55       	subi	r24, 0x59	; 89
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	fc 01       	movw	r30, r24
    1484:	31 83       	std	Z+1, r19	; 0x01
    1486:	20 83       	st	Z, r18
					}
				}
				break;
    1488:	00 c0       	rjmp	.+0      	; 0x148a <workFader+0x83a>
    148a:	00 00       	nop
	// Global Interrupts aktivieren
	sei();
}

void workFader(void){
	for(uint8_t i = 0; i < CHANNEL; i ++){
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <workFader+0x84a>
    1498:	ed cb       	rjmp	.-2086   	; 0xc74 <workFader+0x24>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e2       	ldi	r26, 0x20	; 32
    14a0:	b1 e4       	ldi	r27, 0x41	; 65
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	9b 83       	std	Y+3, r25	; 0x03
    14a6:	ac 83       	std	Y+4, r26	; 0x04
    14a8:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a e7       	ldi	r20, 0x7A	; 122
    14b0:	53 e4       	ldi	r21, 0x43	; 67
    14b2:	6a 81       	ldd	r22, Y+2	; 0x02
    14b4:	7b 81       	ldd	r23, Y+3	; 0x03
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	8e 83       	std	Y+6, r24	; 0x06
    14c4:	9f 83       	std	Y+7, r25	; 0x07
    14c6:	a8 87       	std	Y+8, r26	; 0x08
    14c8:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e8       	ldi	r20, 0x80	; 128
    14d0:	5f e3       	ldi	r21, 0x3F	; 63
    14d2:	6e 81       	ldd	r22, Y+6	; 0x06
    14d4:	7f 81       	ldd	r23, Y+7	; 0x07
    14d6:	88 85       	ldd	r24, Y+8	; 0x08
    14d8:	99 85       	ldd	r25, Y+9	; 0x09
    14da:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__cmpsf2>
    14de:	88 23       	and	r24, r24
    14e0:	2c f4       	brge	.+10     	; 0x14ec <workFader+0x89c>
		__ticks = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	9b 87       	std	Y+11, r25	; 0x0b
    14e8:	8a 87       	std	Y+10, r24	; 0x0a
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <workFader+0x91a>
	else if (__tmp > 65535)
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	4f e7       	ldi	r20, 0x7F	; 127
    14f2:	57 e4       	ldi	r21, 0x47	; 71
    14f4:	6e 81       	ldd	r22, Y+6	; 0x06
    14f6:	7f 81       	ldd	r23, Y+7	; 0x07
    14f8:	88 85       	ldd	r24, Y+8	; 0x08
    14fa:	99 85       	ldd	r25, Y+9	; 0x09
    14fc:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__gesf2>
    1500:	18 16       	cp	r1, r24
    1502:	4c f5       	brge	.+82     	; 0x1556 <workFader+0x906>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	6a 81       	ldd	r22, Y+2	; 0x02
    150e:	7b 81       	ldd	r23, Y+3	; 0x03
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9b 87       	std	Y+11, r25	; 0x0b
    152a:	8a 87       	std	Y+10, r24	; 0x0a
    152c:	0f c0       	rjmp	.+30     	; 0x154c <workFader+0x8fc>
    152e:	89 e1       	ldi	r24, 0x19	; 25
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9d 87       	std	Y+13, r25	; 0x0d
    1534:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1536:	8c 85       	ldd	r24, Y+12	; 0x0c
    1538:	9d 85       	ldd	r25, Y+13	; 0x0d
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <workFader+0x8ea>
    153e:	9d 87       	std	Y+13, r25	; 0x0d
    1540:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	8a 85       	ldd	r24, Y+10	; 0x0a
    1544:	9b 85       	ldd	r25, Y+11	; 0x0b
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9b 87       	std	Y+11, r25	; 0x0b
    154a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	8a 85       	ldd	r24, Y+10	; 0x0a
    154e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	69 f7       	brne	.-38     	; 0x152e <workFader+0x8de>
    1554:	14 c0       	rjmp	.+40     	; 0x157e <workFader+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	6e 81       	ldd	r22, Y+6	; 0x06
    1558:	7f 81       	ldd	r23, Y+7	; 0x07
    155a:	88 85       	ldd	r24, Y+8	; 0x08
    155c:	99 85       	ldd	r25, Y+9	; 0x09
    155e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	9b 87       	std	Y+11, r25	; 0x0b
    1568:	8a 87       	std	Y+10, r24	; 0x0a
    156a:	8a 85       	ldd	r24, Y+10	; 0x0a
    156c:	9b 85       	ldd	r25, Y+11	; 0x0b
    156e:	9f 87       	std	Y+15, r25	; 0x0f
    1570:	8e 87       	std	Y+14, r24	; 0x0e
    1572:	8e 85       	ldd	r24, Y+14	; 0x0e
    1574:	9f 85       	ldd	r25, Y+15	; 0x0f
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <workFader+0x926>
    157a:	9f 87       	std	Y+15, r25	; 0x0f
    157c:	8e 87       	std	Y+14, r24	; 0x0e
				}
				break;
		}
	}
	_delay_ms(10);
}
    157e:	2f 96       	adiw	r28, 0x0f	; 15
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	08 95       	ret

0000159c <__vector_6>:

ISR(TIMER1_COMPA_vect){
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	00 90 5f 00 	lds	r0, 0x005F
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	2f 93       	push	r18
    15aa:	3f 93       	push	r19
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	STOPTIMER;
    15bc:	8e e4       	ldi	r24, 0x4E	; 78
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	2e e4       	ldi	r18, 0x4E	; 78
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	f9 01       	movw	r30, r18
    15c6:	20 81       	ld	r18, Z
    15c8:	2c 7f       	andi	r18, 0xFC	; 252
    15ca:	fc 01       	movw	r30, r24
    15cc:	20 83       	st	Z, r18
	//setTimer, kein Startkanal
	//setTimer(CHANNEL);
	timerReady = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 70 00 	sts	0x0070, r24
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	00 92 5f 00 	sts	0x005F, r0
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <setTimer>:
/*
 * Setzt den Timer neu und berechet neue Zyklen
 */
void setTimer(uint8_t startnum){
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	27 97       	sbiw	r28, 0x07	; 7
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	8f 83       	std	Y+7, r24	; 0x07
	//stop timer
	STOPTIMER;
    1612:	8e e4       	ldi	r24, 0x4E	; 78
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	2e e4       	ldi	r18, 0x4E	; 78
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	f9 01       	movw	r30, r18
    161c:	20 81       	ld	r18, Z
    161e:	2c 7f       	andi	r18, 0xFC	; 252
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18

	cli();
    1624:	f8 94       	cli
	uint16_t counterState = TCNT1;
    1626:	8c e4       	ldi	r24, 0x4C	; 76
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	fc 01       	movw	r30, r24
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05

	sei();
    1634:	78 94       	sei

	//Zyklen erneuern
	for(uint8_t i = 0; i < CHANNEL; i ++){
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	e1 c4       	rjmp	.+2498   	; 0x1ffc <setTimer+0xa0c>
		//fader[i].mode = RUN; //TODO
						outMessage[0] = '\0';
    163a:	10 92 72 00 	sts	0x0072, r1
														while (!(UCSRA & (1<<UDRE)))  /* warten bis Senden moeglich */
																														/*{
																														}
																													UDR = adcData[i][ACT];*/

		if(fader[i].cycles > 0 && (fader[i].mode == SLEEP || fader[i].mode == RUN || fader[i].mode == TESTIMPULS) && i != startnum){
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	9c 01       	movw	r18, r24
    164a:	22 0f       	add	r18, r18
    164c:	33 1f       	adc	r19, r19
    164e:	22 0f       	add	r18, r18
    1650:	33 1f       	adc	r19, r19
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	89 55       	subi	r24, 0x59	; 89
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	fc 01       	movw	r30, r24
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	09 f4       	brne	.+2      	; 0x1666 <setTimer+0x76>
    1664:	c8 c4       	rjmp	.+2448   	; 0x1ff6 <setTimer+0xa06>
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	9c 01       	movw	r18, r24
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	87 55       	subi	r24, 0x57	; 87
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	fc 01       	movw	r30, r24
    1684:	80 81       	ld	r24, Z
    1686:	87 30       	cpi	r24, 0x07	; 7
    1688:	29 f1       	breq	.+74     	; 0x16d4 <setTimer+0xe4>
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	9c 01       	movw	r18, r24
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	87 55       	subi	r24, 0x57	; 87
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	fc 01       	movw	r30, r24
    16a8:	80 81       	ld	r24, Z
    16aa:	85 30       	cpi	r24, 0x05	; 5
    16ac:	99 f0       	breq	.+38     	; 0x16d4 <setTimer+0xe4>
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	87 55       	subi	r24, 0x57	; 87
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	fc 01       	movw	r30, r24
    16cc:	80 81       	ld	r24, Z
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <setTimer+0xe4>
    16d2:	91 c4       	rjmp	.+2338   	; 0x1ff6 <setTimer+0xa06>
    16d4:	99 81       	ldd	r25, Y+1	; 0x01
    16d6:	8f 81       	ldd	r24, Y+7	; 0x07
    16d8:	98 17       	cp	r25, r24
    16da:	09 f4       	brne	.+2      	; 0x16de <setTimer+0xee>
    16dc:	8c c4       	rjmp	.+2328   	; 0x1ff6 <setTimer+0xa06>
			fader[i].cycles = 0; // TODO -= counterState;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	9c 01       	movw	r18, r24
    16ea:	22 0f       	add	r18, r18
    16ec:	33 1f       	adc	r19, r19
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	82 0f       	add	r24, r18
    16f4:	93 1f       	adc	r25, r19
    16f6:	89 55       	subi	r24, 0x59	; 89
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	fc 01       	movw	r30, r24
    16fc:	11 82       	std	Z+1, r1	; 0x01
    16fe:	10 82       	st	Z, r1

			//Nächsten schritt einleiten, wenn fertig
			if(fader[i].cycles == 0){
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	9c 01       	movw	r18, r24
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	82 0f       	add	r24, r18
    1716:	93 1f       	adc	r25, r19
    1718:	89 55       	subi	r24, 0x59	; 89
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	91 81       	ldd	r25, Z+1	; 0x01
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	09 f0       	breq	.+2      	; 0x1728 <setTimer+0x138>
    1726:	67 c4       	rjmp	.+2254   	; 0x1ff6 <setTimer+0xa06>

				outMessage[0] = '\0';
    1728:	10 92 72 00 	sts	0x0072, r1
				switch(fader[i].mode){
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	9c 01       	movw	r18, r24
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	87 55       	subi	r24, 0x57	; 87
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	fc 01       	movw	r30, r24
    174a:	80 81       	ld	r24, Z
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	85 30       	cpi	r24, 0x05	; 5
    1752:	91 05       	cpc	r25, r1
    1754:	09 f4       	brne	.+2      	; 0x1758 <setTimer+0x168>
    1756:	11 c1       	rjmp	.+546    	; 0x197a <setTimer+0x38a>
    1758:	87 30       	cpi	r24, 0x07	; 7
    175a:	91 05       	cpc	r25, r1
    175c:	29 f0       	breq	.+10     	; 0x1768 <setTimer+0x178>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <setTimer+0x176>
    1764:	d7 c2       	rjmp	.+1454   	; 0x1d14 <setTimer+0x724>
    1766:	47 c4       	rjmp	.+2190   	; 0x1ff6 <setTimer+0xa06>
					case SLEEP:
						fader[i].startposition = adcData[i][ACT];
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	48 2f       	mov	r20, r24
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	c9 01       	movw	r24, r18
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	82 1b       	sub	r24, r18
    1784:	93 0b       	sbc	r25, r19
    1786:	86 56       	subi	r24, 0x66	; 102
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	fc 01       	movw	r30, r24
    178c:	60 81       	ld	r22, Z
    178e:	ca 01       	movw	r24, r20
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	9c 01       	movw	r18, r24
    1796:	22 0f       	add	r18, r18
    1798:	33 1f       	adc	r19, r19
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	82 0f       	add	r24, r18
    17a0:	93 1f       	adc	r25, r19
    17a2:	8e 55       	subi	r24, 0x5E	; 94
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	fc 01       	movw	r30, r24
    17a8:	60 83       	st	Z, r22
						fader[i].mode = WAITFORTEST;
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	9c 01       	movw	r18, r24
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	87 55       	subi	r24, 0x57	; 87
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 83       	st	Z, r18

						if(adcData[i][ACT] < fader[i].position){
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	c9 01       	movw	r24, r18
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	82 1b       	sub	r24, r18
    17e2:	93 0b       	sbc	r25, r19
    17e4:	86 56       	subi	r24, 0x66	; 102
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	fc 01       	movw	r30, r24
    17ea:	40 81       	ld	r20, Z
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	9c 01       	movw	r18, r24
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	22 0f       	add	r18, r18
    17fe:	33 1f       	adc	r19, r19
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	8f 55       	subi	r24, 0x5F	; 95
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	48 17       	cp	r20, r24
    180e:	08 f0       	brcs	.+2      	; 0x1812 <setTimer+0x222>
    1810:	5a c0       	rjmp	.+180    	; 0x18c6 <setTimer+0x2d6>
							fader[i].flag |= (1<<DIRECTION);	//vorlaufen
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	ac 01       	movw	r20, r24
    1824:	44 0f       	add	r20, r20
    1826:	55 1f       	adc	r21, r21
    1828:	44 0f       	add	r20, r20
    182a:	55 1f       	adc	r21, r21
    182c:	84 0f       	add	r24, r20
    182e:	95 1f       	adc	r25, r21
    1830:	86 55       	subi	r24, 0x56	; 86
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	41 60       	ori	r20, 0x01	; 1
    183c:	c9 01       	movw	r24, r18
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	9c 01       	movw	r18, r24
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	22 0f       	add	r18, r18
    184a:	33 1f       	adc	r19, r19
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	86 55       	subi	r24, 0x56	; 86
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	fc 01       	movw	r30, r24
    1856:	40 83       	st	Z, r20
							fader[i].cycles = fader[i].factor * 10;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	08 2f       	mov	r16, r24
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	9c 01       	movw	r18, r24
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	82 0f       	add	r24, r18
    1874:	93 1f       	adc	r25, r19
    1876:	8d 55       	subi	r24, 0x5D	; 93
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	fc 01       	movw	r30, r24
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	a2 81       	ldd	r26, Z+2	; 0x02
    1882:	b3 81       	ldd	r27, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9c 01       	movw	r18, r24
    18a6:	c8 01       	movw	r24, r16
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	ac 01       	movw	r20, r24
    18ae:	44 0f       	add	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	44 0f       	add	r20, r20
    18b4:	55 1f       	adc	r21, r21
    18b6:	84 0f       	add	r24, r20
    18b8:	95 1f       	adc	r25, r21
    18ba:	89 55       	subi	r24, 0x59	; 89
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	fc 01       	movw	r30, r24
    18c0:	31 83       	std	Z+1, r19	; 0x01
    18c2:	20 83       	st	Z, r18
						}
						else {
							fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
							fader[i].cycles = fader[i].factor * 10;
						}
						break;
    18c4:	98 c3       	rjmp	.+1840   	; 0x1ff6 <setTimer+0xa06>
						if(adcData[i][ACT] < fader[i].position){
							fader[i].flag |= (1<<DIRECTION);	//vorlaufen
							fader[i].cycles = fader[i].factor * 10;
						}
						else {
							fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	ac 01       	movw	r20, r24
    18d8:	44 0f       	add	r20, r20
    18da:	55 1f       	adc	r21, r21
    18dc:	44 0f       	add	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	84 0f       	add	r24, r20
    18e2:	95 1f       	adc	r25, r21
    18e4:	86 55       	subi	r24, 0x56	; 86
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	fc 01       	movw	r30, r24
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	4e 7f       	andi	r20, 0xFE	; 254
    18f0:	c9 01       	movw	r24, r18
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	9c 01       	movw	r18, r24
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	86 55       	subi	r24, 0x56	; 86
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	fc 01       	movw	r30, r24
    190a:	40 83       	st	Z, r20
							fader[i].cycles = fader[i].factor * 10;
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	08 2f       	mov	r16, r24
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	9c 01       	movw	r18, r24
    191e:	22 0f       	add	r18, r18
    1920:	33 1f       	adc	r19, r19
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	82 0f       	add	r24, r18
    1928:	93 1f       	adc	r25, r19
    192a:	8d 55       	subi	r24, 0x5D	; 93
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	fc 01       	movw	r30, r24
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	a2 81       	ldd	r26, Z+2	; 0x02
    1936:	b3 81       	ldd	r27, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 01       	movw	r18, r24
    195a:	c8 01       	movw	r24, r16
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	ac 01       	movw	r20, r24
    1962:	44 0f       	add	r20, r20
    1964:	55 1f       	adc	r21, r21
    1966:	44 0f       	add	r20, r20
    1968:	55 1f       	adc	r21, r21
    196a:	84 0f       	add	r24, r20
    196c:	95 1f       	adc	r25, r21
    196e:	89 55       	subi	r24, 0x59	; 89
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	fc 01       	movw	r30, r24
    1974:	31 83       	std	Z+1, r19	; 0x01
    1976:	20 83       	st	Z, r18
						}
						break;
    1978:	3e c3       	rjmp	.+1660   	; 0x1ff6 <setTimer+0xa06>
					case RUN:
						stopMotor(i);
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <stopMotor>
						numFaderRunning --;
    1980:	80 91 6f 00 	lds	r24, 0x006F
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	80 93 6f 00 	sts	0x006F, r24


						//Zum Beginn wird der Faktor berechnet
						if(fader[i].flag & (1<<INITIALIZE)){
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	9c 01       	movw	r18, r24
    1996:	22 0f       	add	r18, r18
    1998:	33 1f       	adc	r19, r19
    199a:	22 0f       	add	r18, r18
    199c:	33 1f       	adc	r19, r19
    199e:	82 0f       	add	r24, r18
    19a0:	93 1f       	adc	r25, r19
    19a2:	86 55       	subi	r24, 0x56	; 86
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	fc 01       	movw	r30, r24
    19a8:	80 81       	ld	r24, Z
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	82 70       	andi	r24, 0x02	; 2
    19b0:	99 27       	eor	r25, r25
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <setTimer+0x3c8>
    19b6:	9c c1       	rjmp	.+824    	; 0x1cf0 <setTimer+0x700>
							PORTB &= ~(1<<LED);
    19b8:	88 e3       	ldi	r24, 0x38	; 56
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	28 e3       	ldi	r18, 0x38	; 56
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	f9 01       	movw	r30, r18
    19c2:	20 81       	ld	r18, Z
    19c4:	2e 7f       	andi	r18, 0xFE	; 254
    19c6:	fc 01       	movw	r30, r24
    19c8:	20 83       	st	Z, r18

							outMessage[0] = '\0';
    19ca:	10 92 72 00 	sts	0x0072, r1
																{
																}
															UDR = adcData[i][ACT];*/

							//Wenn Motor zurückläuft
							if(!fader[i].flag & (1<<DIRECTION))
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	9c 01       	movw	r18, r24
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	86 55       	subi	r24, 0x56	; 86
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	fc 01       	movw	r30, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	88 23       	and	r24, r24
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <setTimer+0x404>
    19f2:	53 c0       	rjmp	.+166    	; 0x1a9a <setTimer+0x4aa>
								fader[i].factor = (65535.0) / (fader[i].startposition - adcData[i][ACT]);
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	08 2f       	mov	r16, r24
    19f8:	10 e0       	ldi	r17, 0x00	; 0
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	9c 01       	movw	r18, r24
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	82 0f       	add	r24, r18
    1a10:	93 1f       	adc	r25, r19
    1a12:	8e 55       	subi	r24, 0x5E	; 94
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	fc 01       	movw	r30, r24
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	c9 01       	movw	r24, r18
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	82 1b       	sub	r24, r18
    1a34:	93 0b       	sbc	r25, r19
    1a36:	86 56       	subi	r24, 0x66	; 102
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9a 01       	movw	r18, r20
    1a44:	28 1b       	sub	r18, r24
    1a46:	39 0b       	sbc	r19, r25
    1a48:	c9 01       	movw	r24, r18
    1a4a:	aa 27       	eor	r26, r26
    1a4c:	97 fd       	sbrc	r25, 7
    1a4e:	a0 95       	com	r26
    1a50:	ba 2f       	mov	r27, r26
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9c 01       	movw	r18, r24
    1a60:	ad 01       	movw	r20, r26
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	7f ef       	ldi	r23, 0xFF	; 255
    1a66:	8f e7       	ldi	r24, 0x7F	; 127
    1a68:	97 e4       	ldi	r25, 0x47	; 71
    1a6a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__divsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9c 01       	movw	r18, r24
    1a74:	ad 01       	movw	r20, r26
    1a76:	c8 01       	movw	r24, r16
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	66 0f       	add	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	66 0f       	add	r22, r22
    1a84:	77 1f       	adc	r23, r23
    1a86:	86 0f       	add	r24, r22
    1a88:	97 1f       	adc	r25, r23
    1a8a:	8d 55       	subi	r24, 0x5D	; 93
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
    1a92:	31 83       	std	Z+1, r19	; 0x01
    1a94:	42 83       	std	Z+2, r20	; 0x02
    1a96:	53 83       	std	Z+3, r21	; 0x03
    1a98:	52 c0       	rjmp	.+164    	; 0x1b3e <setTimer+0x54e>
							else
								fader[i].factor = (65535.0) / (adcData[i][ACT] - fader[i].startposition);
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	08 2f       	mov	r16, r24
    1a9e:	10 e0       	ldi	r17, 0x00	; 0
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	82 1b       	sub	r24, r18
    1ab6:	93 0b       	sbc	r25, r19
    1ab8:	86 56       	subi	r24, 0x66	; 102
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	fc 01       	movw	r30, r24
    1abe:	80 81       	ld	r24, Z
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	ac 01       	movw	r20, r24
    1ad0:	44 0f       	add	r20, r20
    1ad2:	55 1f       	adc	r21, r21
    1ad4:	44 0f       	add	r20, r20
    1ad6:	55 1f       	adc	r21, r21
    1ad8:	84 0f       	add	r24, r20
    1ada:	95 1f       	adc	r25, r21
    1adc:	8e 55       	subi	r24, 0x5E	; 94
    1ade:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a9 01       	movw	r20, r18
    1aea:	48 1b       	sub	r20, r24
    1aec:	59 0b       	sbc	r21, r25
    1aee:	ca 01       	movw	r24, r20
    1af0:	aa 27       	eor	r26, r26
    1af2:	97 fd       	sbrc	r25, 7
    1af4:	a0 95       	com	r26
    1af6:	ba 2f       	mov	r27, r26
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9c 01       	movw	r18, r24
    1b06:	ad 01       	movw	r20, r26
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	7f ef       	ldi	r23, 0xFF	; 255
    1b0c:	8f e7       	ldi	r24, 0x7F	; 127
    1b0e:	97 e4       	ldi	r25, 0x47	; 71
    1b10:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__divsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 01       	movw	r18, r24
    1b1a:	ad 01       	movw	r20, r26
    1b1c:	c8 01       	movw	r24, r16
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	bc 01       	movw	r22, r24
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	66 0f       	add	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	86 0f       	add	r24, r22
    1b2e:	97 1f       	adc	r25, r23
    1b30:	8d 55       	subi	r24, 0x5D	; 93
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
    1b38:	31 83       	std	Z+1, r19	; 0x01
    1b3a:	42 83       	std	Z+2, r20	; 0x02
    1b3c:	53 83       	std	Z+3, r21	; 0x03

							fader[i].startposition = adcData[i][ACT];
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	48 2f       	mov	r20, r24
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	c9 01       	movw	r24, r18
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	82 1b       	sub	r24, r18
    1b5a:	93 0b       	sbc	r25, r19
    1b5c:	86 56       	subi	r24, 0x66	; 102
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	fc 01       	movw	r30, r24
    1b62:	60 81       	ld	r22, Z
    1b64:	ca 01       	movw	r24, r20
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	9c 01       	movw	r18, r24
    1b6c:	22 0f       	add	r18, r18
    1b6e:	33 1f       	adc	r19, r19
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	82 0f       	add	r24, r18
    1b76:	93 1f       	adc	r25, r19
    1b78:	8e 55       	subi	r24, 0x5E	; 94
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	60 83       	st	Z, r22
							fader[i].position = 0;
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	82 0f       	add	r24, r18
    1b96:	93 1f       	adc	r25, r19
    1b98:	8f 55       	subi	r24, 0x5F	; 95
    1b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	10 82       	st	Z, r1
							fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	44 0f       	add	r20, r20
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	44 0f       	add	r20, r20
    1bb8:	55 1f       	adc	r21, r21
    1bba:	84 0f       	add	r24, r20
    1bbc:	95 1f       	adc	r25, r21
    1bbe:	86 55       	subi	r24, 0x56	; 86
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	4e 7f       	andi	r20, 0xFE	; 254
    1bca:	c9 01       	movw	r24, r18
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	22 0f       	add	r18, r18
    1bd4:	33 1f       	adc	r19, r19
    1bd6:	22 0f       	add	r18, r18
    1bd8:	33 1f       	adc	r19, r19
    1bda:	82 0f       	add	r24, r18
    1bdc:	93 1f       	adc	r25, r19
    1bde:	86 55       	subi	r24, 0x56	; 86
    1be0:	9f 4f       	sbci	r25, 0xFF	; 255
    1be2:	fc 01       	movw	r30, r24
    1be4:	40 83       	st	Z, r20
							fader[i].cycles = fader[i].factor * adcData[i][ACT];
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	08 2f       	mov	r16, r24
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	9c 01       	movw	r18, r24
    1bf8:	22 0f       	add	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	22 0f       	add	r18, r18
    1bfe:	33 1f       	adc	r19, r19
    1c00:	82 0f       	add	r24, r18
    1c02:	93 1f       	adc	r25, r19
    1c04:	8d 55       	subi	r24, 0x5D	; 93
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	fc 01       	movw	r30, r24
    1c0a:	c0 80       	ld	r12, Z
    1c0c:	d1 80       	ldd	r13, Z+1	; 0x01
    1c0e:	e2 80       	ldd	r14, Z+2	; 0x02
    1c10:	f3 80       	ldd	r15, Z+3	; 0x03
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	c9 01       	movw	r24, r18
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	82 1b       	sub	r24, r18
    1c28:	93 0b       	sbc	r25, r19
    1c2a:	86 56       	subi	r24, 0x66	; 102
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	fc 01       	movw	r30, r24
    1c30:	80 81       	ld	r24, Z
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	aa 27       	eor	r26, r26
    1c38:	97 fd       	sbrc	r25, 7
    1c3a:	a0 95       	com	r26
    1c3c:	ba 2f       	mov	r27, r26
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 01       	movw	r18, r24
    1c4c:	ad 01       	movw	r20, r26
    1c4e:	c7 01       	movw	r24, r14
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9c 01       	movw	r18, r24
    1c68:	c8 01       	movw	r24, r16
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	ac 01       	movw	r20, r24
    1c70:	44 0f       	add	r20, r20
    1c72:	55 1f       	adc	r21, r21
    1c74:	44 0f       	add	r20, r20
    1c76:	55 1f       	adc	r21, r21
    1c78:	84 0f       	add	r24, r20
    1c7a:	95 1f       	adc	r25, r21
    1c7c:	89 55       	subi	r24, 0x59	; 89
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	fc 01       	movw	r30, r24
    1c82:	31 83       	std	Z+1, r19	; 0x01
    1c84:	20 83       	st	Z, r18
							fader[i].mode = WAITFORTEST;
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	9c 01       	movw	r18, r24
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	87 55       	subi	r24, 0x57	; 87
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	21 e0       	ldi	r18, 0x01	; 1
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	20 83       	st	Z, r18
							fader[i].flag&=~(1<<INITIALIZE);
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	ac 01       	movw	r20, r24
    1cba:	44 0f       	add	r20, r20
    1cbc:	55 1f       	adc	r21, r21
    1cbe:	44 0f       	add	r20, r20
    1cc0:	55 1f       	adc	r21, r21
    1cc2:	84 0f       	add	r24, r20
    1cc4:	95 1f       	adc	r25, r21
    1cc6:	86 55       	subi	r24, 0x56	; 86
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	fc 01       	movw	r30, r24
    1ccc:	80 81       	ld	r24, Z
    1cce:	48 2f       	mov	r20, r24
    1cd0:	4d 7f       	andi	r20, 0xFD	; 253
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	9c 01       	movw	r18, r24
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	86 55       	subi	r24, 0x56	; 86
    1ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cea:	fc 01       	movw	r30, r24
    1cec:	40 83       	st	Z, r20
						}
						else{
							fader[i].mode = ENDCONTROLL;
						}
						break;
    1cee:	83 c1       	rjmp	.+774    	; 0x1ff6 <setTimer+0xa06>
							fader[i].cycles = fader[i].factor * adcData[i][ACT];
							fader[i].mode = WAITFORTEST;
							fader[i].flag&=~(1<<INITIALIZE);
						}
						else{
							fader[i].mode = ENDCONTROLL;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	9c 01       	movw	r18, r24
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	22 0f       	add	r18, r18
    1d02:	33 1f       	adc	r19, r19
    1d04:	82 0f       	add	r24, r18
    1d06:	93 1f       	adc	r25, r19
    1d08:	87 55       	subi	r24, 0x57	; 87
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	26 e0       	ldi	r18, 0x06	; 6
    1d0e:	fc 01       	movw	r30, r24
    1d10:	20 83       	st	Z, r18
						}
						break;
    1d12:	71 c1       	rjmp	.+738    	; 0x1ff6 <setTimer+0xa06>
					case TESTIMPULS:
						stopMotor(i);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	0e 94 d5 01 	call	0x3aa	; 0x3aa <stopMotor>
						numFaderRunning --;
    1d1a:	80 91 6f 00 	lds	r24, 0x006F
    1d1e:	81 50       	subi	r24, 0x01	; 1
    1d20:	80 93 6f 00 	sts	0x006F, r24

						fader[i].startposition = adcData[i][ACT];
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	48 2f       	mov	r20, r24
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	c9 01       	movw	r24, r18
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	82 1b       	sub	r24, r18
    1d40:	93 0b       	sbc	r25, r19
    1d42:	86 56       	subi	r24, 0x66	; 102
    1d44:	9f 4f       	sbci	r25, 0xFF	; 255
    1d46:	fc 01       	movw	r30, r24
    1d48:	60 81       	ld	r22, Z
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	9c 01       	movw	r18, r24
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	82 0f       	add	r24, r18
    1d5c:	93 1f       	adc	r25, r19
    1d5e:	8e 55       	subi	r24, 0x5E	; 94
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	fc 01       	movw	r30, r24
    1d64:	60 83       	st	Z, r22
						fader[i].mode = WAITFORRUN;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	9c 01       	movw	r18, r24
    1d72:	22 0f       	add	r18, r18
    1d74:	33 1f       	adc	r19, r19
    1d76:	22 0f       	add	r18, r18
    1d78:	33 1f       	adc	r19, r19
    1d7a:	82 0f       	add	r24, r18
    1d7c:	93 1f       	adc	r25, r19
    1d7e:	87 55       	subi	r24, 0x57	; 87
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	24 e0       	ldi	r18, 0x04	; 4
    1d84:	fc 01       	movw	r30, r24
    1d86:	20 83       	st	Z, r18

						if(adcData[i][ACT] < fader[i].position){
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	c9 01       	movw	r24, r18
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	82 1b       	sub	r24, r18
    1d9e:	93 0b       	sbc	r25, r19
    1da0:	86 56       	subi	r24, 0x66	; 102
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	fc 01       	movw	r30, r24
    1da6:	40 81       	ld	r20, Z
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	9c 01       	movw	r18, r24
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	8f 55       	subi	r24, 0x5F	; 95
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 17       	cp	r20, r24
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <setTimer+0x7de>
    1dcc:	8a c0       	rjmp	.+276    	; 0x1ee2 <setTimer+0x8f2>
							fader[i].flag |= (1<<DIRECTION);	//vorlaufen
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	ac 01       	movw	r20, r24
    1de0:	44 0f       	add	r20, r20
    1de2:	55 1f       	adc	r21, r21
    1de4:	44 0f       	add	r20, r20
    1de6:	55 1f       	adc	r21, r21
    1de8:	84 0f       	add	r24, r20
    1dea:	95 1f       	adc	r25, r21
    1dec:	86 55       	subi	r24, 0x56	; 86
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	41 60       	ori	r20, 0x01	; 1
    1df8:	c9 01       	movw	r24, r18
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	9c 01       	movw	r18, r24
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	22 0f       	add	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	82 0f       	add	r24, r18
    1e0a:	93 1f       	adc	r25, r19
    1e0c:	86 55       	subi	r24, 0x56	; 86
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	fc 01       	movw	r30, r24
    1e12:	40 83       	st	Z, r20
							fader[i].cycles = fader[i].factor * (fader[i].position - fader[i].startposition);
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	08 2f       	mov	r16, r24
    1e18:	10 e0       	ldi	r17, 0x00	; 0
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	9c 01       	movw	r18, r24
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	82 0f       	add	r24, r18
    1e30:	93 1f       	adc	r25, r19
    1e32:	8d 55       	subi	r24, 0x5D	; 93
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	fc 01       	movw	r30, r24
    1e38:	c0 80       	ld	r12, Z
    1e3a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e3c:	e2 80       	ldd	r14, Z+2	; 0x02
    1e3e:	f3 80       	ldd	r15, Z+3	; 0x03
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	9c 01       	movw	r18, r24
    1e4c:	22 0f       	add	r18, r18
    1e4e:	33 1f       	adc	r19, r19
    1e50:	22 0f       	add	r18, r18
    1e52:	33 1f       	adc	r19, r19
    1e54:	82 0f       	add	r24, r18
    1e56:	93 1f       	adc	r25, r19
    1e58:	8f 55       	subi	r24, 0x5F	; 95
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	ac 01       	movw	r20, r24
    1e70:	44 0f       	add	r20, r20
    1e72:	55 1f       	adc	r21, r21
    1e74:	44 0f       	add	r20, r20
    1e76:	55 1f       	adc	r21, r21
    1e78:	84 0f       	add	r24, r20
    1e7a:	95 1f       	adc	r25, r21
    1e7c:	8e 55       	subi	r24, 0x5E	; 94
    1e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e80:	fc 01       	movw	r30, r24
    1e82:	80 81       	ld	r24, Z
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a9 01       	movw	r20, r18
    1e8a:	48 1b       	sub	r20, r24
    1e8c:	59 0b       	sbc	r21, r25
    1e8e:	ca 01       	movw	r24, r20
    1e90:	aa 27       	eor	r26, r26
    1e92:	97 fd       	sbrc	r25, 7
    1e94:	a0 95       	com	r26
    1e96:	ba 2f       	mov	r27, r26
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9c 01       	movw	r18, r24
    1ea6:	ad 01       	movw	r20, r26
    1ea8:	c7 01       	movw	r24, r14
    1eaa:	b6 01       	movw	r22, r12
    1eac:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	c8 01       	movw	r24, r16
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	ac 01       	movw	r20, r24
    1eca:	44 0f       	add	r20, r20
    1ecc:	55 1f       	adc	r21, r21
    1ece:	44 0f       	add	r20, r20
    1ed0:	55 1f       	adc	r21, r21
    1ed2:	84 0f       	add	r24, r20
    1ed4:	95 1f       	adc	r25, r21
    1ed6:	89 55       	subi	r24, 0x59	; 89
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	fc 01       	movw	r30, r24
    1edc:	31 83       	std	Z+1, r19	; 0x01
    1ede:	20 83       	st	Z, r18
						}
						else {
							fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
							fader[i].cycles = fader[i].factor * (fader[i].startposition - fader[i].position);
						}
						break;
    1ee0:	89 c0       	rjmp	.+274    	; 0x1ff4 <setTimer+0xa04>
						if(adcData[i][ACT] < fader[i].position){
							fader[i].flag |= (1<<DIRECTION);	//vorlaufen
							fader[i].cycles = fader[i].factor * (fader[i].position - fader[i].startposition);
						}
						else {
							fader[i].flag &= ~(1<<DIRECTION);	//zurücklaufen
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	ac 01       	movw	r20, r24
    1ef4:	44 0f       	add	r20, r20
    1ef6:	55 1f       	adc	r21, r21
    1ef8:	44 0f       	add	r20, r20
    1efa:	55 1f       	adc	r21, r21
    1efc:	84 0f       	add	r24, r20
    1efe:	95 1f       	adc	r25, r21
    1f00:	86 55       	subi	r24, 0x56	; 86
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	fc 01       	movw	r30, r24
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	4e 7f       	andi	r20, 0xFE	; 254
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	9c 01       	movw	r18, r24
    1f14:	22 0f       	add	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	22 0f       	add	r18, r18
    1f1a:	33 1f       	adc	r19, r19
    1f1c:	82 0f       	add	r24, r18
    1f1e:	93 1f       	adc	r25, r19
    1f20:	86 55       	subi	r24, 0x56	; 86
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	fc 01       	movw	r30, r24
    1f26:	40 83       	st	Z, r20
							fader[i].cycles = fader[i].factor * (fader[i].startposition - fader[i].position);
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	08 2f       	mov	r16, r24
    1f2c:	10 e0       	ldi	r17, 0x00	; 0
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	9c 01       	movw	r18, r24
    1f3a:	22 0f       	add	r18, r18
    1f3c:	33 1f       	adc	r19, r19
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	82 0f       	add	r24, r18
    1f44:	93 1f       	adc	r25, r19
    1f46:	8d 55       	subi	r24, 0x5D	; 93
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	c0 80       	ld	r12, Z
    1f4e:	d1 80       	ldd	r13, Z+1	; 0x01
    1f50:	e2 80       	ldd	r14, Z+2	; 0x02
    1f52:	f3 80       	ldd	r15, Z+3	; 0x03
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	9c 01       	movw	r18, r24
    1f60:	22 0f       	add	r18, r18
    1f62:	33 1f       	adc	r19, r19
    1f64:	22 0f       	add	r18, r18
    1f66:	33 1f       	adc	r19, r19
    1f68:	82 0f       	add	r24, r18
    1f6a:	93 1f       	adc	r25, r19
    1f6c:	8e 55       	subi	r24, 0x5E	; 94
    1f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f70:	fc 01       	movw	r30, r24
    1f72:	80 81       	ld	r24, Z
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	ac 01       	movw	r20, r24
    1f84:	44 0f       	add	r20, r20
    1f86:	55 1f       	adc	r21, r21
    1f88:	44 0f       	add	r20, r20
    1f8a:	55 1f       	adc	r21, r21
    1f8c:	84 0f       	add	r24, r20
    1f8e:	95 1f       	adc	r25, r21
    1f90:	8f 55       	subi	r24, 0x5F	; 95
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	fc 01       	movw	r30, r24
    1f96:	80 81       	ld	r24, Z
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a9 01       	movw	r20, r18
    1f9e:	48 1b       	sub	r20, r24
    1fa0:	59 0b       	sbc	r21, r25
    1fa2:	ca 01       	movw	r24, r20
    1fa4:	aa 27       	eor	r26, r26
    1fa6:	97 fd       	sbrc	r25, 7
    1fa8:	a0 95       	com	r26
    1faa:	ba 2f       	mov	r27, r26
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__floatsisf>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9c 01       	movw	r18, r24
    1fba:	ad 01       	movw	r20, r26
    1fbc:	c7 01       	movw	r24, r14
    1fbe:	b6 01       	movw	r22, r12
    1fc0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	ac 01       	movw	r20, r24
    1fde:	44 0f       	add	r20, r20
    1fe0:	55 1f       	adc	r21, r21
    1fe2:	44 0f       	add	r20, r20
    1fe4:	55 1f       	adc	r21, r21
    1fe6:	84 0f       	add	r24, r20
    1fe8:	95 1f       	adc	r25, r21
    1fea:	89 55       	subi	r24, 0x59	; 89
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	fc 01       	movw	r30, r24
    1ff0:	31 83       	std	Z+1, r19	; 0x01
    1ff2:	20 83       	st	Z, r18
						}
						break;
    1ff4:	00 00       	nop
	uint16_t counterState = TCNT1;

	sei();

	//Zyklen erneuern
	for(uint8_t i = 0; i < CHANNEL; i ++){
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	8f 5f       	subi	r24, 0xFF	; 255
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <setTimer+0xa14>
    2002:	1b cb       	rjmp	.-2506   	; 0x163a <setTimer+0x4a>
		}
	}


	//kleinsten Wert ermitteln
	uint16_t shorts = 0xffff;
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	9b 83       	std	Y+3, r25	; 0x03
    200a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i = 0; i < CHANNEL; i ++){
    200c:	1c 82       	std	Y+4, r1	; 0x04
    200e:	3f c0       	rjmp	.+126    	; 0x208e <setTimer+0xa9e>
		if(fader[i].cycles < shorts && fader[i].cycles > 0)
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	9c 01       	movw	r18, r24
    201c:	22 0f       	add	r18, r18
    201e:	33 1f       	adc	r19, r19
    2020:	22 0f       	add	r18, r18
    2022:	33 1f       	adc	r19, r19
    2024:	82 0f       	add	r24, r18
    2026:	93 1f       	adc	r25, r19
    2028:	89 55       	subi	r24, 0x59	; 89
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	fc 01       	movw	r30, r24
    202e:	20 81       	ld	r18, Z
    2030:	31 81       	ldd	r19, Z+1	; 0x01
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	28 17       	cp	r18, r24
    2038:	39 07       	cpc	r19, r25
    203a:	30 f5       	brcc	.+76     	; 0x2088 <setTimer+0xa98>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	9c 01       	movw	r18, r24
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	82 0f       	add	r24, r18
    2052:	93 1f       	adc	r25, r19
    2054:	89 55       	subi	r24, 0x59	; 89
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	99 f0       	breq	.+38     	; 0x2088 <setTimer+0xa98>
			shorts = fader[i].cycles;
    2062:	8c 81       	ldd	r24, Y+4	; 0x04
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	9c 01       	movw	r18, r24
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	22 0f       	add	r18, r18
    2074:	33 1f       	adc	r19, r19
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	89 55       	subi	r24, 0x59	; 89
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	fc 01       	movw	r30, r24
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	9b 83       	std	Y+3, r25	; 0x03
    2086:	8a 83       	std	Y+2, r24	; 0x02
	}


	//kleinsten Wert ermitteln
	uint16_t shorts = 0xffff;
	for(uint8_t i = 0; i < CHANNEL; i ++){
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	8f 5f       	subi	r24, 0xFF	; 255
    208c:	8c 83       	std	Y+4, r24	; 0x04
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <setTimer+0xaa6>
    2094:	bd cf       	rjmp	.-134    	; 0x2010 <setTimer+0xa20>
		if(fader[i].cycles < shorts && fader[i].cycles > 0)
			shorts = fader[i].cycles;
	}

	//start timer
	if(shorts > 0){
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	a9 f0       	breq	.+42     	; 0x20c8 <setTimer+0xad8>
		OCR1A = shorts;
    209e:	8a e4       	ldi	r24, 0x4A	; 74
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	2a 81       	ldd	r18, Y+2	; 0x02
    20a4:	3b 81       	ldd	r19, Y+3	; 0x03
    20a6:	fc 01       	movw	r30, r24
    20a8:	31 83       	std	Z+1, r19	; 0x01
    20aa:	20 83       	st	Z, r18
		TCNT1 = 0;
    20ac:	8c e4       	ldi	r24, 0x4C	; 76
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	11 82       	std	Z+1, r1	; 0x01
    20b4:	10 82       	st	Z, r1
		STARTTIMER;
    20b6:	8e e4       	ldi	r24, 0x4E	; 78
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	2e e4       	ldi	r18, 0x4E	; 78
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	f9 01       	movw	r30, r18
    20c0:	20 81       	ld	r18, Z
    20c2:	23 60       	ori	r18, 0x03	; 3
    20c4:	fc 01       	movw	r30, r24
    20c6:	20 83       	st	Z, r18
	}
}
    20c8:	27 96       	adiw	r28, 0x07	; 7
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	08 95       	ret

000020e6 <readFader>:

uint8_t readFader(uint8_t pin, uint8_t* mask){
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	27 97       	sbiw	r28, 0x07	; 7
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	7f 83       	std	Y+7, r23	; 0x07
    20fe:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t counter = 10;
    2100:	8a e0       	ldi	r24, 0x0A	; 10
    2102:	89 83       	std	Y+1, r24	; 0x01
	uint16_t value = 0;
    2104:	1c 82       	std	Y+4, r1	; 0x04
    2106:	1b 82       	std	Y+3, r1	; 0x03

	//loaler alter Wert
	uint8_t thisOldvalue = oldValue;
    2108:	80 91 71 00 	lds	r24, 0x0071
    210c:	8a 83       	std	Y+2, r24	; 0x02
	*mask &= ~(1<<NEWVALUE);
    210e:	8e 81       	ldd	r24, Y+6	; 0x06
    2110:	9f 81       	ldd	r25, Y+7	; 0x07
    2112:	fc 01       	movw	r30, r24
    2114:	80 81       	ld	r24, Z
    2116:	28 2f       	mov	r18, r24
    2118:	2e 7f       	andi	r18, 0xFE	; 254
    211a:	8e 81       	ldd	r24, Y+6	; 0x06
    211c:	9f 81       	ldd	r25, Y+7	; 0x07
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18

	do{
		value = readMeassure(0);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	0e 94 a5 04 	call	0x94a	; 0x94a <readMeassure>
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
		value = value >> 4;
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	92 95       	swap	r25
    2132:	82 95       	swap	r24
    2134:	8f 70       	andi	r24, 0x0F	; 15
    2136:	89 27       	eor	r24, r25
    2138:	9f 70       	andi	r25, 0x0F	; 15
    213a:	89 27       	eor	r24, r25
    213c:	9c 83       	std	Y+4, r25	; 0x04
    213e:	8b 83       	std	Y+3, r24	; 0x03
		if(thisOldvalue == value)
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	28 17       	cp	r18, r24
    214c:	39 07       	cpc	r19, r25
    214e:	21 f4       	brne	.+8      	; 0x2158 <readFader+0x72>
			counter ++;
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	8f 5f       	subi	r24, 0xFF	; 255
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	01 c0       	rjmp	.+2      	; 0x215a <readFader+0x74>
		else{
			counter = 0;
    2158:	19 82       	std	Y+1, r1	; 0x01
		}
		thisOldvalue = value;
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
	}while(counter < 10);
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8a 30       	cpi	r24, 0x0A	; 10
    2162:	f8 f2       	brcs	.-66     	; 0x2122 <readFader+0x3c>

	if(oldValue != thisOldvalue)
    2164:	90 91 71 00 	lds	r25, 0x0071
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	98 17       	cp	r25, r24
    216c:	51 f0       	breq	.+20     	; 0x2182 <readFader+0x9c>
		*mask |= (1<<NEWVALUE);
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	9f 81       	ldd	r25, Y+7	; 0x07
    2172:	fc 01       	movw	r30, r24
    2174:	80 81       	ld	r24, Z
    2176:	28 2f       	mov	r18, r24
    2178:	21 60       	ori	r18, 0x01	; 1
    217a:	8e 81       	ldd	r24, Y+6	; 0x06
    217c:	9f 81       	ldd	r25, Y+7	; 0x07
    217e:	fc 01       	movw	r30, r24
    2180:	20 83       	st	Z, r18

	oldValue = thisOldvalue;
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	80 93 71 00 	sts	0x0071, r24

	return (uint8_t) value;
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
}
    218a:	27 96       	adiw	r28, 0x07	; 7
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <testFader>:

void testFader(uint8_t i){
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	1f 92       	push	r1
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	89 83       	std	Y+1, r24	; 0x01
	//Neuer Wert
	if(adcData[i][ADCNEWVALUE] != adcData[i][OLD]){
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	c9 01       	movw	r24, r18
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	82 1b       	sub	r24, r18
    21be:	93 0b       	sbc	r25, r19
    21c0:	82 56       	subi	r24, 0x62	; 98
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	fc 01       	movw	r30, r24
    21c6:	40 81       	ld	r20, Z
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	c9 01       	movw	r24, r18
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	82 1b       	sub	r24, r18
    21de:	93 0b       	sbc	r25, r19
    21e0:	85 56       	subi	r24, 0x65	; 101
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	fc 01       	movw	r30, r24
    21e6:	80 81       	ld	r24, Z
    21e8:	48 17       	cp	r20, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <testFader+0x52>
    21ec:	f7 c0       	rjmp	.+494    	; 0x23dc <testFader+0x240>
		if(adcData[i][ADCNEWVALUE] == adcData[i][TEMPVALUE]){
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	c9 01       	movw	r24, r18
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	82 1b       	sub	r24, r18
    2204:	93 0b       	sbc	r25, r19
    2206:	82 56       	subi	r24, 0x62	; 98
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	fc 01       	movw	r30, r24
    220c:	40 81       	ld	r20, Z
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	c9 01       	movw	r24, r18
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	82 1b       	sub	r24, r18
    2224:	93 0b       	sbc	r25, r19
    2226:	81 56       	subi	r24, 0x61	; 97
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	fc 01       	movw	r30, r24
    222c:	80 81       	ld	r24, Z
    222e:	48 17       	cp	r20, r24
    2230:	01 f5       	brne	.+64     	; 0x2272 <testFader+0xd6>
			adcData[i][COUNTER] ++;
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	c9 01       	movw	r24, r18
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	82 1b       	sub	r24, r18
    2248:	93 0b       	sbc	r25, r19
    224a:	80 56       	subi	r24, 0x60	; 96
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	fc 01       	movw	r30, r24
    2250:	80 81       	ld	r24, Z
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	48 0f       	add	r20, r24
    2256:	c9 01       	movw	r24, r18
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	82 1b       	sub	r24, r18
    2266:	93 0b       	sbc	r25, r19
    2268:	80 56       	subi	r24, 0x60	; 96
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	fc 01       	movw	r30, r24
    226e:	40 83       	st	Z, r20
    2270:	10 c0       	rjmp	.+32     	; 0x2292 <testFader+0xf6>
		} else {
			adcData[i][COUNTER] = 0;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	c9 01       	movw	r24, r18
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	82 1b       	sub	r24, r18
    2288:	93 0b       	sbc	r25, r19
    228a:	80 56       	subi	r24, 0x60	; 96
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	fc 01       	movw	r30, r24
    2290:	10 82       	st	Z, r1
		}

		adcData[i][TEMPVALUE] = adcData[i][ADCNEWVALUE];
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	48 2f       	mov	r20, r24
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	ca 01       	movw	r24, r20
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	84 1b       	sub	r24, r20
    22ae:	95 0b       	sbc	r25, r21
    22b0:	82 56       	subi	r24, 0x62	; 98
    22b2:	9f 4f       	sbci	r25, 0xFF	; 255
    22b4:	fc 01       	movw	r30, r24
    22b6:	40 81       	ld	r20, Z
    22b8:	c9 01       	movw	r24, r18
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	82 1b       	sub	r24, r18
    22c8:	93 0b       	sbc	r25, r19
    22ca:	81 56       	subi	r24, 0x61	; 97
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	fc 01       	movw	r30, r24
    22d0:	40 83       	st	Z, r20

		//neuer Wert
		if(adcData[i][COUNTER] == ENTPRELLLEVEL){
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	c9 01       	movw	r24, r18
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	82 1b       	sub	r24, r18
    22e8:	93 0b       	sbc	r25, r19
    22ea:	80 56       	subi	r24, 0x60	; 96
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	fc 01       	movw	r30, r24
    22f0:	80 81       	ld	r24, Z
    22f2:	8a 30       	cpi	r24, 0x0A	; 10
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <testFader+0x15c>
    22f6:	82 c0       	rjmp	.+260    	; 0x23fc <testFader+0x260>
			adcData[i][OLD] = adcData[i][ACT];
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	48 2f       	mov	r20, r24
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	ca 01       	movw	r24, r20
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	84 1b       	sub	r24, r20
    2314:	95 0b       	sbc	r25, r21
    2316:	86 56       	subi	r24, 0x66	; 102
    2318:	9f 4f       	sbci	r25, 0xFF	; 255
    231a:	fc 01       	movw	r30, r24
    231c:	40 81       	ld	r20, Z
    231e:	c9 01       	movw	r24, r18
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	82 1b       	sub	r24, r18
    232e:	93 0b       	sbc	r25, r19
    2330:	85 56       	subi	r24, 0x65	; 101
    2332:	9f 4f       	sbci	r25, 0xFF	; 255
    2334:	fc 01       	movw	r30, r24
    2336:	40 83       	st	Z, r20
			adcData[i][ACT] = adcData[i][ADCNEWVALUE];
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	48 2f       	mov	r20, r24
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	ca 01       	movw	r24, r20
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	84 1b       	sub	r24, r20
    2354:	95 0b       	sbc	r25, r21
    2356:	82 56       	subi	r24, 0x62	; 98
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	fc 01       	movw	r30, r24
    235c:	40 81       	ld	r20, Z
    235e:	c9 01       	movw	r24, r18
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	82 1b       	sub	r24, r18
    236e:	93 0b       	sbc	r25, r19
    2370:	86 56       	subi	r24, 0x66	; 102
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	fc 01       	movw	r30, r24
    2376:	40 83       	st	Z, r20
			adcData[i][CHANGED] = 1;
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	c9 01       	movw	r24, r18
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	82 1b       	sub	r24, r18
    238e:	93 0b       	sbc	r25, r19
    2390:	84 56       	subi	r24, 0x64	; 100
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	21 e0       	ldi	r18, 0x01	; 1
    2396:	fc 01       	movw	r30, r24
    2398:	20 83       	st	Z, r18
			adcData[i][NEWVALUEFLAG] = 0;
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	c9 01       	movw	r24, r18
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	82 1b       	sub	r24, r18
    23b0:	93 0b       	sbc	r25, r19
    23b2:	83 56       	subi	r24, 0x63	; 99
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	fc 01       	movw	r30, r24
    23b8:	10 82       	st	Z, r1
			adcData[i][COUNTER] = 0;
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	c9 01       	movw	r24, r18
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	82 1b       	sub	r24, r18
    23d0:	93 0b       	sbc	r25, r19
    23d2:	80 56       	subi	r24, 0x60	; 96
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	fc 01       	movw	r30, r24
    23d8:	10 82       	st	Z, r1
    23da:	10 c0       	rjmp	.+32     	; 0x23fc <testFader+0x260>
		}

	}
	else {
		adcData[i][COUNTER] = 0;
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	c9 01       	movw	r24, r18
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	82 1b       	sub	r24, r18
    23f2:	93 0b       	sbc	r25, r19
    23f4:	80 56       	subi	r24, 0x60	; 96
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	fc 01       	movw	r30, r24
    23fa:	10 82       	st	Z, r1
	}
}
    23fc:	0f 90       	pop	r0
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <init>:
 *  Created on: 23.11.2015
 *      Author: sascha
 */
#include "main.h"

void init(){
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<2);
    240c:	87 e3       	ldi	r24, 0x37	; 55
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	27 e3       	ldi	r18, 0x37	; 55
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	f9 01       	movw	r30, r18
    2416:	20 81       	ld	r18, Z
    2418:	24 60       	ori	r18, 0x04	; 4
    241a:	fc 01       	movw	r30, r24
    241c:	20 83       	st	Z, r18
	PORTB|= (1<<2);
    241e:	88 e3       	ldi	r24, 0x38	; 56
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	28 e3       	ldi	r18, 0x38	; 56
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	f9 01       	movw	r30, r18
    2428:	20 81       	ld	r18, Z
    242a:	24 60       	ori	r18, 0x04	; 4
    242c:	fc 01       	movw	r30, r24
    242e:	20 83       	st	Z, r18

	//Debug LED
	DDRB|= (1<< LED);
    2430:	87 e3       	ldi	r24, 0x37	; 55
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	27 e3       	ldi	r18, 0x37	; 55
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	f9 01       	movw	r30, r18
    243a:	20 81       	ld	r18, Z
    243c:	21 60       	ori	r18, 0x01	; 1
    243e:	fc 01       	movw	r30, r24
    2440:	20 83       	st	Z, r18
	PORTB|= (1<< LED);
    2442:	88 e3       	ldi	r24, 0x38	; 56
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	28 e3       	ldi	r18, 0x38	; 56
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	f9 01       	movw	r30, r18
    244c:	20 81       	ld	r18, Z
    244e:	21 60       	ori	r18, 0x01	; 1
    2450:	fc 01       	movw	r30, r24
    2452:	20 83       	st	Z, r18
}
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <main>:

int main(void){
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	ee 97       	sbiw	r28, 0x3e	; 62
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
	initSPI();
    246e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <initSPI>
	uart_init();
    2472:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_init>
	init();
    2476:	0e 94 02 12 	call	0x2404	; 0x2404 <init>
	init_shift();
    247a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <init_shift>
	initFader();
    247e:	0e 94 28 05 	call	0xa50	; 0xa50 <initFader>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	aa e7       	ldi	r26, 0x7A	; 122
    2488:	b4 e4       	ldi	r27, 0x44	; 68
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	ad 83       	std	Y+5, r26	; 0x05
    2490:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a e7       	ldi	r20, 0x7A	; 122
    2498:	53 e4       	ldi	r21, 0x43	; 67
    249a:	6b 81       	ldd	r22, Y+3	; 0x03
    249c:	7c 81       	ldd	r23, Y+4	; 0x04
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8f 83       	std	Y+7, r24	; 0x07
    24ac:	98 87       	std	Y+8, r25	; 0x08
    24ae:	a9 87       	std	Y+9, r26	; 0x09
    24b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__cmpsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <main+0x7a>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <main+0xf8>
	else if (__tmp > 65535)
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__gesf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	6b 81       	ldd	r22, Y+3	; 0x03
    24f6:	7c 81       	ldd	r23, Y+4	; 0x04
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9c 87       	std	Y+12, r25	; 0x0c
    2512:	8b 87       	std	Y+11, r24	; 0x0b
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <main+0xda>
    2516:	89 e1       	ldi	r24, 0x19	; 25
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9e 87       	std	Y+14, r25	; 0x0e
    251c:	8d 87       	std	Y+13, r24	; 0x0d
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <main+0xc8>
    2526:	9e 87       	std	Y+14, r25	; 0x0e
    2528:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	8b 85       	ldd	r24, Y+11	; 0x0b
    252c:	9c 85       	ldd	r25, Y+12	; 0x0c
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9c 87       	std	Y+12, r25	; 0x0c
    2532:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	8b 85       	ldd	r24, Y+11	; 0x0b
    2536:	9c 85       	ldd	r25, Y+12	; 0x0c
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <main+0xbc>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9c 87       	std	Y+12, r25	; 0x0c
    2550:	8b 87       	std	Y+11, r24	; 0x0b
    2552:	8b 85       	ldd	r24, Y+11	; 0x0b
    2554:	9c 85       	ldd	r25, Y+12	; 0x0c
    2556:	98 8b       	std	Y+16, r25	; 0x10
    2558:	8f 87       	std	Y+15, r24	; 0x0f
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	98 89       	ldd	r25, Y+16	; 0x10
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <main+0x104>
    2562:	98 8b       	std	Y+16, r25	; 0x10
    2564:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1000);
	outMessage[0] = 'H';
    2566:	88 e4       	ldi	r24, 0x48	; 72
    2568:	80 93 72 00 	sts	0x0072, r24
	outMessage[1] = 'A';
    256c:	81 e4       	ldi	r24, 0x41	; 65
    256e:	80 93 73 00 	sts	0x0073, r24
	outMessage[2] = 'L';
    2572:	8c e4       	ldi	r24, 0x4C	; 76
    2574:	80 93 74 00 	sts	0x0074, r24
	outMessage[3] = 'L';
    2578:	8c e4       	ldi	r24, 0x4C	; 76
    257a:	80 93 75 00 	sts	0x0075, r24
	outMessage[4] = 'O';
    257e:	8f e4       	ldi	r24, 0x4F	; 79
    2580:	80 93 76 00 	sts	0x0076, r24
	outMessage[5] = '\0';
    2584:	10 92 77 00 	sts	0x0077, r1
	numOutMessage = 5;
    2588:	85 e0       	ldi	r24, 0x05	; 5
    258a:	80 93 61 00 	sts	0x0061, r24
	iOutMessage = 0;
    258e:	10 92 60 00 	sts	0x0060, r1
	sendMessage();
    2592:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <sendMessage>

	while(!(uartFlag & (1<<SENDET)));
    2596:	00 00       	nop
    2598:	80 91 64 00 	lds	r24, 0x0064
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	81 70       	andi	r24, 0x01	; 1
    25a2:	99 27       	eor	r25, r25
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	c1 f3       	breq	.-16     	; 0x2598 <main+0x13e>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	aa e7       	ldi	r26, 0x7A	; 122
    25ae:	b4 e4       	ldi	r27, 0x44	; 68
    25b0:	89 8b       	std	Y+17, r24	; 0x11
    25b2:	9a 8b       	std	Y+18, r25	; 0x12
    25b4:	ab 8b       	std	Y+19, r26	; 0x13
    25b6:	bc 8b       	std	Y+20, r27	; 0x14
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a e7       	ldi	r20, 0x7A	; 122
    25be:	53 e4       	ldi	r21, 0x43	; 67
    25c0:	69 89       	ldd	r22, Y+17	; 0x11
    25c2:	7a 89       	ldd	r23, Y+18	; 0x12
    25c4:	8b 89       	ldd	r24, Y+19	; 0x13
    25c6:	9c 89       	ldd	r25, Y+20	; 0x14
    25c8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8d 8b       	std	Y+21, r24	; 0x15
    25d2:	9e 8b       	std	Y+22, r25	; 0x16
    25d4:	af 8b       	std	Y+23, r26	; 0x17
    25d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__cmpsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	2c f4       	brge	.+10     	; 0x25fa <main+0x1a0>
		__ticks = 1;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9a 8f       	std	Y+26, r25	; 0x1a
    25f6:	89 8f       	std	Y+25, r24	; 0x19
    25f8:	3f c0       	rjmp	.+126    	; 0x2678 <main+0x21e>
	else if (__tmp > 65535)
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	6d 89       	ldd	r22, Y+21	; 0x15
    2604:	7e 89       	ldd	r23, Y+22	; 0x16
    2606:	8f 89       	ldd	r24, Y+23	; 0x17
    2608:	98 8d       	ldd	r25, Y+24	; 0x18
    260a:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__gesf2>
    260e:	18 16       	cp	r1, r24
    2610:	4c f5       	brge	.+82     	; 0x2664 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	69 89       	ldd	r22, Y+17	; 0x11
    261c:	7a 89       	ldd	r23, Y+18	; 0x12
    261e:	8b 89       	ldd	r24, Y+19	; 0x13
    2620:	9c 89       	ldd	r25, Y+20	; 0x14
    2622:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	bc 01       	movw	r22, r24
    262c:	cd 01       	movw	r24, r26
    262e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9a 8f       	std	Y+26, r25	; 0x1a
    2638:	89 8f       	std	Y+25, r24	; 0x19
    263a:	0f c0       	rjmp	.+30     	; 0x265a <main+0x200>
    263c:	89 e1       	ldi	r24, 0x19	; 25
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 8f       	std	Y+28, r25	; 0x1c
    2642:	8b 8f       	std	Y+27, r24	; 0x1b
    2644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <main+0x1ee>
    264c:	9c 8f       	std	Y+28, r25	; 0x1c
    264e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2650:	89 8d       	ldd	r24, Y+25	; 0x19
    2652:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	9a 8f       	std	Y+26, r25	; 0x1a
    2658:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265a:	89 8d       	ldd	r24, Y+25	; 0x19
    265c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	69 f7       	brne	.-38     	; 0x263c <main+0x1e2>
    2662:	14 c0       	rjmp	.+40     	; 0x268c <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2664:	6d 89       	ldd	r22, Y+21	; 0x15
    2666:	7e 89       	ldd	r23, Y+22	; 0x16
    2668:	8f 89       	ldd	r24, Y+23	; 0x17
    266a:	98 8d       	ldd	r25, Y+24	; 0x18
    266c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9a 8f       	std	Y+26, r25	; 0x1a
    2676:	89 8f       	std	Y+25, r24	; 0x19
    2678:	89 8d       	ldd	r24, Y+25	; 0x19
    267a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    267c:	9e 8f       	std	Y+30, r25	; 0x1e
    267e:	8d 8f       	std	Y+29, r24	; 0x1d
    2680:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2682:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <main+0x22a>
    2688:	9e 8f       	std	Y+30, r25	; 0x1e
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	aa e7       	ldi	r26, 0x7A	; 122
    2692:	b4 e4       	ldi	r27, 0x44	; 68
    2694:	8f 8f       	std	Y+31, r24	; 0x1f
    2696:	98 a3       	std	Y+32, r25	; 0x20
    2698:	a9 a3       	std	Y+33, r26	; 0x21
    269a:	ba a3       	std	Y+34, r27	; 0x22
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a e7       	ldi	r20, 0x7A	; 122
    26a2:	53 e4       	ldi	r21, 0x43	; 67
    26a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26a6:	78 a1       	ldd	r23, Y+32	; 0x20
    26a8:	89 a1       	ldd	r24, Y+33	; 0x21
    26aa:	9a a1       	ldd	r25, Y+34	; 0x22
    26ac:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8b a3       	std	Y+35, r24	; 0x23
    26b6:	9c a3       	std	Y+36, r25	; 0x24
    26b8:	ad a3       	std	Y+37, r26	; 0x25
    26ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	6b a1       	ldd	r22, Y+35	; 0x23
    26c6:	7c a1       	ldd	r23, Y+36	; 0x24
    26c8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ca:	9e a1       	ldd	r25, Y+38	; 0x26
    26cc:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__cmpsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <main+0x284>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	98 a7       	std	Y+40, r25	; 0x28
    26da:	8f a3       	std	Y+39, r24	; 0x27
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <main+0x302>
	else if (__tmp > 65535)
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	57 e4       	ldi	r21, 0x47	; 71
    26e6:	6b a1       	ldd	r22, Y+35	; 0x23
    26e8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ea:	8d a1       	ldd	r24, Y+37	; 0x25
    26ec:	9e a1       	ldd	r25, Y+38	; 0x26
    26ee:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__gesf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e2       	ldi	r20, 0x20	; 32
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2700:	78 a1       	ldd	r23, Y+32	; 0x20
    2702:	89 a1       	ldd	r24, Y+33	; 0x21
    2704:	9a a1       	ldd	r25, Y+34	; 0x22
    2706:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	98 a7       	std	Y+40, r25	; 0x28
    271c:	8f a3       	std	Y+39, r24	; 0x27
    271e:	0f c0       	rjmp	.+30     	; 0x273e <main+0x2e4>
    2720:	89 e1       	ldi	r24, 0x19	; 25
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9a a7       	std	Y+42, r25	; 0x2a
    2726:	89 a7       	std	Y+41, r24	; 0x29
    2728:	89 a5       	ldd	r24, Y+41	; 0x29
    272a:	9a a5       	ldd	r25, Y+42	; 0x2a
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <main+0x2d2>
    2730:	9a a7       	std	Y+42, r25	; 0x2a
    2732:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8f a1       	ldd	r24, Y+39	; 0x27
    2736:	98 a5       	ldd	r25, Y+40	; 0x28
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	98 a7       	std	Y+40, r25	; 0x28
    273c:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8f a1       	ldd	r24, Y+39	; 0x27
    2740:	98 a5       	ldd	r25, Y+40	; 0x28
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <main+0x2c6>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <main+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6b a1       	ldd	r22, Y+35	; 0x23
    274a:	7c a1       	ldd	r23, Y+36	; 0x24
    274c:	8d a1       	ldd	r24, Y+37	; 0x25
    274e:	9e a1       	ldd	r25, Y+38	; 0x26
    2750:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	98 a7       	std	Y+40, r25	; 0x28
    275a:	8f a3       	std	Y+39, r24	; 0x27
    275c:	8f a1       	ldd	r24, Y+39	; 0x27
    275e:	98 a5       	ldd	r25, Y+40	; 0x28
    2760:	9c a7       	std	Y+44, r25	; 0x2c
    2762:	8b a7       	std	Y+43, r24	; 0x2b
    2764:	8b a5       	ldd	r24, Y+43	; 0x2b
    2766:	9c a5       	ldd	r25, Y+44	; 0x2c
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <main+0x30e>
    276c:	9c a7       	std	Y+44, r25	; 0x2c
    276e:	8b a7       	std	Y+43, r24	; 0x2b
	for(uint32_t i = 0; i < (startValue * timefactor); i ++) _delay_ms(1);
	stopMotor(0);*/

	_delay_ms(1000);

	startMeassure();
    2770:	0e 94 81 03 	call	0x702	; 0x702 <startMeassure>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	aa e7       	ldi	r26, 0x7A	; 122
    277a:	b4 e4       	ldi	r27, 0x44	; 68
    277c:	8d a7       	std	Y+45, r24	; 0x2d
    277e:	9e a7       	std	Y+46, r25	; 0x2e
    2780:	af a7       	std	Y+47, r26	; 0x2f
    2782:	b8 ab       	std	Y+48, r27	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a e7       	ldi	r20, 0x7A	; 122
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	6d a5       	ldd	r22, Y+45	; 0x2d
    278e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2790:	8f a5       	ldd	r24, Y+47	; 0x2f
    2792:	98 a9       	ldd	r25, Y+48	; 0x30
    2794:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	89 ab       	std	Y+49, r24	; 0x31
    279e:	9a ab       	std	Y+50, r25	; 0x32
    27a0:	ab ab       	std	Y+51, r26	; 0x33
    27a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	69 a9       	ldd	r22, Y+49	; 0x31
    27ae:	7a a9       	ldd	r23, Y+50	; 0x32
    27b0:	8b a9       	ldd	r24, Y+51	; 0x33
    27b2:	9c a9       	ldd	r25, Y+52	; 0x34
    27b4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__cmpsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <main+0x36c>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9e ab       	std	Y+54, r25	; 0x36
    27c2:	8d ab       	std	Y+53, r24	; 0x35
    27c4:	3f c0       	rjmp	.+126    	; 0x2844 <main+0x3ea>
	else if (__tmp > 65535)
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	69 a9       	ldd	r22, Y+49	; 0x31
    27d0:	7a a9       	ldd	r23, Y+50	; 0x32
    27d2:	8b a9       	ldd	r24, Y+51	; 0x33
    27d4:	9c a9       	ldd	r25, Y+52	; 0x34
    27d6:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__gesf2>
    27da:	18 16       	cp	r1, r24
    27dc:	4c f5       	brge	.+82     	; 0x2830 <main+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    27e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    27ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ec:	98 a9       	ldd	r25, Y+48	; 0x30
    27ee:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e ab       	std	Y+54, r25	; 0x36
    2804:	8d ab       	std	Y+53, r24	; 0x35
    2806:	0f c0       	rjmp	.+30     	; 0x2826 <main+0x3cc>
    2808:	89 e1       	ldi	r24, 0x19	; 25
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	98 af       	std	Y+56, r25	; 0x38
    280e:	8f ab       	std	Y+55, r24	; 0x37
    2810:	8f a9       	ldd	r24, Y+55	; 0x37
    2812:	98 ad       	ldd	r25, Y+56	; 0x38
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <main+0x3ba>
    2818:	98 af       	std	Y+56, r25	; 0x38
    281a:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281c:	8d a9       	ldd	r24, Y+53	; 0x35
    281e:	9e a9       	ldd	r25, Y+54	; 0x36
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9e ab       	std	Y+54, r25	; 0x36
    2824:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	8d a9       	ldd	r24, Y+53	; 0x35
    2828:	9e a9       	ldd	r25, Y+54	; 0x36
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	69 f7       	brne	.-38     	; 0x2808 <main+0x3ae>
    282e:	14 c0       	rjmp	.+40     	; 0x2858 <main+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	69 a9       	ldd	r22, Y+49	; 0x31
    2832:	7a a9       	ldd	r23, Y+50	; 0x32
    2834:	8b a9       	ldd	r24, Y+51	; 0x33
    2836:	9c a9       	ldd	r25, Y+52	; 0x34
    2838:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9e ab       	std	Y+54, r25	; 0x36
    2842:	8d ab       	std	Y+53, r24	; 0x35
    2844:	8d a9       	ldd	r24, Y+53	; 0x35
    2846:	9e a9       	ldd	r25, Y+54	; 0x36
    2848:	9a af       	std	Y+58, r25	; 0x3a
    284a:	89 af       	std	Y+57, r24	; 0x39
    284c:	89 ad       	ldd	r24, Y+57	; 0x39
    284e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <main+0x3f6>
    2854:	9a af       	std	Y+58, r25	; 0x3a
    2856:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1000);

	while(1){

		if(timerReady){
    2858:	80 91 70 00 	lds	r24, 0x0070
    285c:	88 23       	and	r24, r24
    285e:	29 f0       	breq	.+10     	; 0x286a <main+0x410>
			setTimer(CHANNEL);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <setTimer>
			timerReady = 0;
    2866:	10 92 70 00 	sts	0x0070, r1
		}
		workFader();
    286a:	0e 94 28 06 	call	0xc50	; 0xc50 <workFader>

		char Buffer[4] = "";
    286e:	1b ae       	std	Y+59, r1	; 0x3b
    2870:	1c ae       	std	Y+60, r1	; 0x3c
    2872:	1d ae       	std	Y+61, r1	; 0x3d
    2874:	1e ae       	std	Y+62, r1	; 0x3e
		uint8_t newMessage = 0;
    2876:	19 82       	std	Y+1, r1	; 0x01
		for(uint8_t i = 0; i < CHANNEL; i ++){
    2878:	1a 82       	std	Y+2, r1	; 0x02
    287a:	b4 c0       	rjmp	.+360    	; 0x29e4 <main+0x58a>
			if(adcData[i][NEWVALUEFLAG]){
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	c9 01       	movw	r24, r18
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	82 1b       	sub	r24, r18
    2892:	93 0b       	sbc	r25, r19
    2894:	83 56       	subi	r24, 0x63	; 99
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	fc 01       	movw	r30, r24
    289a:	80 81       	ld	r24, Z
    289c:	88 23       	and	r24, r24
    289e:	99 f0       	breq	.+38     	; 0x28c6 <main+0x46c>
				testFader(i);
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	0e 94 ce 10 	call	0x219c	; 0x219c <testFader>
				adcData[i][NEWVALUEFLAG] = 0;
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	c9 01       	movw	r24, r18
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	82 1b       	sub	r24, r18
    28bc:	93 0b       	sbc	r25, r19
    28be:	83 56       	subi	r24, 0x63	; 99
    28c0:	9f 4f       	sbci	r25, 0xFF	; 255
    28c2:	fc 01       	movw	r30, r24
    28c4:	10 82       	st	Z, r1
			}

			outMessage[0] = '\0';
    28c6:	10 92 72 00 	sts	0x0072, r1

			if(adcData[i][CHANGED] == 1){
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	c9 01       	movw	r24, r18
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	82 1b       	sub	r24, r18
    28e0:	93 0b       	sbc	r25, r19
    28e2:	84 56       	subi	r24, 0x64	; 100
    28e4:	9f 4f       	sbci	r25, 0xFF	; 255
    28e6:	fc 01       	movw	r30, r24
    28e8:	80 81       	ld	r24, Z
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <main+0x496>
    28ee:	77 c0       	rjmp	.+238    	; 0x29de <main+0x584>
				//adcData[i][CHANGED] = 0;
				if(strlen(outMessage) > 0)
    28f0:	82 e7       	ldi	r24, 0x72	; 114
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	fc 01       	movw	r30, r24
    28f6:	80 81       	ld	r24, Z
    28f8:	88 23       	and	r24, r24
    28fa:	91 f0       	breq	.+36     	; 0x2920 <main+0x4c6>
					strcat(outMessage, ",");
    28fc:	82 e7       	ldi	r24, 0x72	; 114
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9c 01       	movw	r18, r24
    2902:	f9 01       	movw	r30, r18
    2904:	01 90       	ld	r0, Z+
    2906:	00 20       	and	r0, r0
    2908:	e9 f7       	brne	.-6      	; 0x2904 <main+0x4aa>
    290a:	cf 01       	movw	r24, r30
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	82 1b       	sub	r24, r18
    2910:	93 0b       	sbc	r25, r19
    2912:	8e 58       	subi	r24, 0x8E	; 142
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	2c e2       	ldi	r18, 0x2C	; 44
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	fc 01       	movw	r30, r24
    291c:	31 83       	std	Z+1, r19	; 0x01
    291e:	20 83       	st	Z, r18
				itoa(i, Buffer, 10);
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e 01       	movw	r18, r28
    2928:	25 5c       	subi	r18, 0xC5	; 197
    292a:	3f 4f       	sbci	r19, 0xFF	; 255
    292c:	4a e0       	ldi	r20, 0x0A	; 10
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	b9 01       	movw	r22, r18
    2932:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <itoa>
				strcat(outMessage, Buffer);
    2936:	ce 01       	movw	r24, r28
    2938:	cb 96       	adiw	r24, 0x3b	; 59
    293a:	bc 01       	movw	r22, r24
    293c:	82 e7       	ldi	r24, 0x72	; 114
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <strcat>
				strcat(outMessage, ":");
    2944:	82 e7       	ldi	r24, 0x72	; 114
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9c 01       	movw	r18, r24
    294a:	f9 01       	movw	r30, r18
    294c:	01 90       	ld	r0, Z+
    294e:	00 20       	and	r0, r0
    2950:	e9 f7       	brne	.-6      	; 0x294c <main+0x4f2>
    2952:	cf 01       	movw	r24, r30
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	82 1b       	sub	r24, r18
    2958:	93 0b       	sbc	r25, r19
    295a:	8e 58       	subi	r24, 0x8E	; 142
    295c:	9f 4f       	sbci	r25, 0xFF	; 255
    295e:	2a e3       	ldi	r18, 0x3A	; 58
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	fc 01       	movw	r30, r24
    2964:	31 83       	std	Z+1, r19	; 0x01
    2966:	20 83       	st	Z, r18
				itoa(adcData[i][ACT], Buffer, 10);
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	c9 01       	movw	r24, r18
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	82 1b       	sub	r24, r18
    297e:	93 0b       	sbc	r25, r19
    2980:	86 56       	subi	r24, 0x66	; 102
    2982:	9f 4f       	sbci	r25, 0xFF	; 255
    2984:	fc 01       	movw	r30, r24
    2986:	80 81       	ld	r24, Z
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9e 01       	movw	r18, r28
    298e:	25 5c       	subi	r18, 0xC5	; 197
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	4a e0       	ldi	r20, 0x0A	; 10
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	b9 01       	movw	r22, r18
    2998:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <itoa>
				strcat(outMessage, Buffer);
    299c:	ce 01       	movw	r24, r28
    299e:	cb 96       	adiw	r24, 0x3b	; 59
    29a0:	bc 01       	movw	r22, r24
    29a2:	82 e7       	ldi	r24, 0x72	; 114
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <strcat>

				iOutMessage = 0;
    29aa:	10 92 60 00 	sts	0x0060, r1
				numOutMessage = strlen(outMessage);
    29ae:	82 e7       	ldi	r24, 0x72	; 114
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <strlen>
    29b6:	80 93 61 00 	sts	0x0061, r24

				adcData[i][CHANGED] = 0;
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	c9 01       	movw	r24, r18
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	82 1b       	sub	r24, r18
    29d0:	93 0b       	sbc	r25, r19
    29d2:	84 56       	subi	r24, 0x64	; 100
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	fc 01       	movw	r30, r24
    29d8:	10 82       	st	Z, r1

				newMessage = 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	89 83       	std	Y+1, r24	; 0x01
		}
		workFader();

		char Buffer[4] = "";
		uint8_t newMessage = 0;
		for(uint8_t i = 0; i < CHANNEL; i ++){
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	8a 83       	std	Y+2, r24	; 0x02
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	88 23       	and	r24, r24
    29e8:	09 f4       	brne	.+2      	; 0x29ec <main+0x592>
    29ea:	48 cf       	rjmp	.-368    	; 0x287c <main+0x422>

				newMessage = 1;
			}
		}

		if(newMessage){
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	88 23       	and	r24, r24
    29f0:	59 f0       	breq	.+22     	; 0x2a08 <main+0x5ae>
			sendMessage();
    29f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <sendMessage>

			while(!(uartFlag & (1<<SENDET)));
    29f6:	00 00       	nop
    29f8:	80 91 64 00 	lds	r24, 0x0064
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	81 70       	andi	r24, 0x01	; 1
    2a02:	99 27       	eor	r25, r25
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	c1 f3       	breq	.-16     	; 0x29f8 <main+0x59e>
			sendMessage();

			while(!(uartFlag & (1<<SENDET)));
		}*/

	}
    2a08:	27 cf       	rjmp	.-434    	; 0x2858 <main+0x3fe>

00002a0a <__cmpsf2>:
    2a0a:	d4 d0       	rcall	.+424    	; 0x2bb4 <__fp_cmp>
    2a0c:	08 f4       	brcc	.+2      	; 0x2a10 <__cmpsf2+0x6>
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	08 95       	ret

00002a12 <__divsf3>:
    2a12:	0c d0       	rcall	.+24     	; 0x2a2c <__divsf3x>
    2a14:	0a c1       	rjmp	.+532    	; 0x2c2a <__fp_round>
    2a16:	02 d1       	rcall	.+516    	; 0x2c1c <__fp_pscB>
    2a18:	40 f0       	brcs	.+16     	; 0x2a2a <__divsf3+0x18>
    2a1a:	f9 d0       	rcall	.+498    	; 0x2c0e <__fp_pscA>
    2a1c:	30 f0       	brcs	.+12     	; 0x2a2a <__divsf3+0x18>
    2a1e:	21 f4       	brne	.+8      	; 0x2a28 <__divsf3+0x16>
    2a20:	5f 3f       	cpi	r21, 0xFF	; 255
    2a22:	19 f0       	breq	.+6      	; 0x2a2a <__divsf3+0x18>
    2a24:	eb c0       	rjmp	.+470    	; 0x2bfc <__fp_inf>
    2a26:	51 11       	cpse	r21, r1
    2a28:	34 c1       	rjmp	.+616    	; 0x2c92 <__fp_szero>
    2a2a:	ee c0       	rjmp	.+476    	; 0x2c08 <__fp_nan>

00002a2c <__divsf3x>:
    2a2c:	0f d1       	rcall	.+542    	; 0x2c4c <__fp_split3>
    2a2e:	98 f3       	brcs	.-26     	; 0x2a16 <__divsf3+0x4>

00002a30 <__divsf3_pse>:
    2a30:	99 23       	and	r25, r25
    2a32:	c9 f3       	breq	.-14     	; 0x2a26 <__divsf3+0x14>
    2a34:	55 23       	and	r21, r21
    2a36:	b1 f3       	breq	.-20     	; 0x2a24 <__divsf3+0x12>
    2a38:	95 1b       	sub	r25, r21
    2a3a:	55 0b       	sbc	r21, r21
    2a3c:	bb 27       	eor	r27, r27
    2a3e:	aa 27       	eor	r26, r26
    2a40:	62 17       	cp	r22, r18
    2a42:	73 07       	cpc	r23, r19
    2a44:	84 07       	cpc	r24, r20
    2a46:	38 f0       	brcs	.+14     	; 0x2a56 <__divsf3_pse+0x26>
    2a48:	9f 5f       	subi	r25, 0xFF	; 255
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	44 1f       	adc	r20, r20
    2a52:	aa 1f       	adc	r26, r26
    2a54:	a9 f3       	breq	.-22     	; 0x2a40 <__divsf3_pse+0x10>
    2a56:	33 d0       	rcall	.+102    	; 0x2abe <__divsf3_pse+0x8e>
    2a58:	0e 2e       	mov	r0, r30
    2a5a:	3a f0       	brmi	.+14     	; 0x2a6a <__divsf3_pse+0x3a>
    2a5c:	e0 e8       	ldi	r30, 0x80	; 128
    2a5e:	30 d0       	rcall	.+96     	; 0x2ac0 <__divsf3_pse+0x90>
    2a60:	91 50       	subi	r25, 0x01	; 1
    2a62:	50 40       	sbci	r21, 0x00	; 0
    2a64:	e6 95       	lsr	r30
    2a66:	00 1c       	adc	r0, r0
    2a68:	ca f7       	brpl	.-14     	; 0x2a5c <__divsf3_pse+0x2c>
    2a6a:	29 d0       	rcall	.+82     	; 0x2abe <__divsf3_pse+0x8e>
    2a6c:	fe 2f       	mov	r31, r30
    2a6e:	27 d0       	rcall	.+78     	; 0x2abe <__divsf3_pse+0x8e>
    2a70:	66 0f       	add	r22, r22
    2a72:	77 1f       	adc	r23, r23
    2a74:	88 1f       	adc	r24, r24
    2a76:	bb 1f       	adc	r27, r27
    2a78:	26 17       	cp	r18, r22
    2a7a:	37 07       	cpc	r19, r23
    2a7c:	48 07       	cpc	r20, r24
    2a7e:	ab 07       	cpc	r26, r27
    2a80:	b0 e8       	ldi	r27, 0x80	; 128
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <__divsf3_pse+0x56>
    2a84:	bb 0b       	sbc	r27, r27
    2a86:	80 2d       	mov	r24, r0
    2a88:	bf 01       	movw	r22, r30
    2a8a:	ff 27       	eor	r31, r31
    2a8c:	93 58       	subi	r25, 0x83	; 131
    2a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a90:	2a f0       	brmi	.+10     	; 0x2a9c <__divsf3_pse+0x6c>
    2a92:	9e 3f       	cpi	r25, 0xFE	; 254
    2a94:	51 05       	cpc	r21, r1
    2a96:	68 f0       	brcs	.+26     	; 0x2ab2 <__divsf3_pse+0x82>
    2a98:	b1 c0       	rjmp	.+354    	; 0x2bfc <__fp_inf>
    2a9a:	fb c0       	rjmp	.+502    	; 0x2c92 <__fp_szero>
    2a9c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a9e:	ec f3       	brlt	.-6      	; 0x2a9a <__divsf3_pse+0x6a>
    2aa0:	98 3e       	cpi	r25, 0xE8	; 232
    2aa2:	dc f3       	brlt	.-10     	; 0x2a9a <__divsf3_pse+0x6a>
    2aa4:	86 95       	lsr	r24
    2aa6:	77 95       	ror	r23
    2aa8:	67 95       	ror	r22
    2aaa:	b7 95       	ror	r27
    2aac:	f7 95       	ror	r31
    2aae:	9f 5f       	subi	r25, 0xFF	; 255
    2ab0:	c9 f7       	brne	.-14     	; 0x2aa4 <__divsf3_pse+0x74>
    2ab2:	88 0f       	add	r24, r24
    2ab4:	91 1d       	adc	r25, r1
    2ab6:	96 95       	lsr	r25
    2ab8:	87 95       	ror	r24
    2aba:	97 f9       	bld	r25, 7
    2abc:	08 95       	ret
    2abe:	e1 e0       	ldi	r30, 0x01	; 1
    2ac0:	66 0f       	add	r22, r22
    2ac2:	77 1f       	adc	r23, r23
    2ac4:	88 1f       	adc	r24, r24
    2ac6:	bb 1f       	adc	r27, r27
    2ac8:	62 17       	cp	r22, r18
    2aca:	73 07       	cpc	r23, r19
    2acc:	84 07       	cpc	r24, r20
    2ace:	ba 07       	cpc	r27, r26
    2ad0:	20 f0       	brcs	.+8      	; 0x2ada <__divsf3_pse+0xaa>
    2ad2:	62 1b       	sub	r22, r18
    2ad4:	73 0b       	sbc	r23, r19
    2ad6:	84 0b       	sbc	r24, r20
    2ad8:	ba 0b       	sbc	r27, r26
    2ada:	ee 1f       	adc	r30, r30
    2adc:	88 f7       	brcc	.-30     	; 0x2ac0 <__divsf3_pse+0x90>
    2ade:	e0 95       	com	r30
    2ae0:	08 95       	ret

00002ae2 <__fixunssfsi>:
    2ae2:	bc d0       	rcall	.+376    	; 0x2c5c <__fp_splitA>
    2ae4:	88 f0       	brcs	.+34     	; 0x2b08 <__fixunssfsi+0x26>
    2ae6:	9f 57       	subi	r25, 0x7F	; 127
    2ae8:	90 f0       	brcs	.+36     	; 0x2b0e <__fixunssfsi+0x2c>
    2aea:	b9 2f       	mov	r27, r25
    2aec:	99 27       	eor	r25, r25
    2aee:	b7 51       	subi	r27, 0x17	; 23
    2af0:	a0 f0       	brcs	.+40     	; 0x2b1a <__fixunssfsi+0x38>
    2af2:	d1 f0       	breq	.+52     	; 0x2b28 <__fixunssfsi+0x46>
    2af4:	66 0f       	add	r22, r22
    2af6:	77 1f       	adc	r23, r23
    2af8:	88 1f       	adc	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	1a f0       	brmi	.+6      	; 0x2b04 <__fixunssfsi+0x22>
    2afe:	ba 95       	dec	r27
    2b00:	c9 f7       	brne	.-14     	; 0x2af4 <__fixunssfsi+0x12>
    2b02:	12 c0       	rjmp	.+36     	; 0x2b28 <__fixunssfsi+0x46>
    2b04:	b1 30       	cpi	r27, 0x01	; 1
    2b06:	81 f0       	breq	.+32     	; 0x2b28 <__fixunssfsi+0x46>
    2b08:	c3 d0       	rcall	.+390    	; 0x2c90 <__fp_zero>
    2b0a:	b1 e0       	ldi	r27, 0x01	; 1
    2b0c:	08 95       	ret
    2b0e:	c0 c0       	rjmp	.+384    	; 0x2c90 <__fp_zero>
    2b10:	67 2f       	mov	r22, r23
    2b12:	78 2f       	mov	r23, r24
    2b14:	88 27       	eor	r24, r24
    2b16:	b8 5f       	subi	r27, 0xF8	; 248
    2b18:	39 f0       	breq	.+14     	; 0x2b28 <__fixunssfsi+0x46>
    2b1a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b1c:	cc f3       	brlt	.-14     	; 0x2b10 <__fixunssfsi+0x2e>
    2b1e:	86 95       	lsr	r24
    2b20:	77 95       	ror	r23
    2b22:	67 95       	ror	r22
    2b24:	b3 95       	inc	r27
    2b26:	d9 f7       	brne	.-10     	; 0x2b1e <__fixunssfsi+0x3c>
    2b28:	3e f4       	brtc	.+14     	; 0x2b38 <__fixunssfsi+0x56>
    2b2a:	90 95       	com	r25
    2b2c:	80 95       	com	r24
    2b2e:	70 95       	com	r23
    2b30:	61 95       	neg	r22
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	8f 4f       	sbci	r24, 0xFF	; 255
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	08 95       	ret

00002b3a <__floatunsisf>:
    2b3a:	e8 94       	clt
    2b3c:	09 c0       	rjmp	.+18     	; 0x2b50 <__floatsisf+0x12>

00002b3e <__floatsisf>:
    2b3e:	97 fb       	bst	r25, 7
    2b40:	3e f4       	brtc	.+14     	; 0x2b50 <__floatsisf+0x12>
    2b42:	90 95       	com	r25
    2b44:	80 95       	com	r24
    2b46:	70 95       	com	r23
    2b48:	61 95       	neg	r22
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b50:	99 23       	and	r25, r25
    2b52:	a9 f0       	breq	.+42     	; 0x2b7e <__floatsisf+0x40>
    2b54:	f9 2f       	mov	r31, r25
    2b56:	96 e9       	ldi	r25, 0x96	; 150
    2b58:	bb 27       	eor	r27, r27
    2b5a:	93 95       	inc	r25
    2b5c:	f6 95       	lsr	r31
    2b5e:	87 95       	ror	r24
    2b60:	77 95       	ror	r23
    2b62:	67 95       	ror	r22
    2b64:	b7 95       	ror	r27
    2b66:	f1 11       	cpse	r31, r1
    2b68:	f8 cf       	rjmp	.-16     	; 0x2b5a <__floatsisf+0x1c>
    2b6a:	fa f4       	brpl	.+62     	; 0x2baa <__floatsisf+0x6c>
    2b6c:	bb 0f       	add	r27, r27
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <__floatsisf+0x36>
    2b70:	60 ff       	sbrs	r22, 0
    2b72:	1b c0       	rjmp	.+54     	; 0x2baa <__floatsisf+0x6c>
    2b74:	6f 5f       	subi	r22, 0xFF	; 255
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7c:	16 c0       	rjmp	.+44     	; 0x2baa <__floatsisf+0x6c>
    2b7e:	88 23       	and	r24, r24
    2b80:	11 f0       	breq	.+4      	; 0x2b86 <__floatsisf+0x48>
    2b82:	96 e9       	ldi	r25, 0x96	; 150
    2b84:	11 c0       	rjmp	.+34     	; 0x2ba8 <__floatsisf+0x6a>
    2b86:	77 23       	and	r23, r23
    2b88:	21 f0       	breq	.+8      	; 0x2b92 <__floatsisf+0x54>
    2b8a:	9e e8       	ldi	r25, 0x8E	; 142
    2b8c:	87 2f       	mov	r24, r23
    2b8e:	76 2f       	mov	r23, r22
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <__floatsisf+0x5e>
    2b92:	66 23       	and	r22, r22
    2b94:	71 f0       	breq	.+28     	; 0x2bb2 <__floatsisf+0x74>
    2b96:	96 e8       	ldi	r25, 0x86	; 134
    2b98:	86 2f       	mov	r24, r22
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	2a f0       	brmi	.+10     	; 0x2baa <__floatsisf+0x6c>
    2ba0:	9a 95       	dec	r25
    2ba2:	66 0f       	add	r22, r22
    2ba4:	77 1f       	adc	r23, r23
    2ba6:	88 1f       	adc	r24, r24
    2ba8:	da f7       	brpl	.-10     	; 0x2ba0 <__floatsisf+0x62>
    2baa:	88 0f       	add	r24, r24
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	97 f9       	bld	r25, 7
    2bb2:	08 95       	ret

00002bb4 <__fp_cmp>:
    2bb4:	99 0f       	add	r25, r25
    2bb6:	00 08       	sbc	r0, r0
    2bb8:	55 0f       	add	r21, r21
    2bba:	aa 0b       	sbc	r26, r26
    2bbc:	e0 e8       	ldi	r30, 0x80	; 128
    2bbe:	fe ef       	ldi	r31, 0xFE	; 254
    2bc0:	16 16       	cp	r1, r22
    2bc2:	17 06       	cpc	r1, r23
    2bc4:	e8 07       	cpc	r30, r24
    2bc6:	f9 07       	cpc	r31, r25
    2bc8:	c0 f0       	brcs	.+48     	; 0x2bfa <__fp_cmp+0x46>
    2bca:	12 16       	cp	r1, r18
    2bcc:	13 06       	cpc	r1, r19
    2bce:	e4 07       	cpc	r30, r20
    2bd0:	f5 07       	cpc	r31, r21
    2bd2:	98 f0       	brcs	.+38     	; 0x2bfa <__fp_cmp+0x46>
    2bd4:	62 1b       	sub	r22, r18
    2bd6:	73 0b       	sbc	r23, r19
    2bd8:	84 0b       	sbc	r24, r20
    2bda:	95 0b       	sbc	r25, r21
    2bdc:	39 f4       	brne	.+14     	; 0x2bec <__fp_cmp+0x38>
    2bde:	0a 26       	eor	r0, r26
    2be0:	61 f0       	breq	.+24     	; 0x2bfa <__fp_cmp+0x46>
    2be2:	23 2b       	or	r18, r19
    2be4:	24 2b       	or	r18, r20
    2be6:	25 2b       	or	r18, r21
    2be8:	21 f4       	brne	.+8      	; 0x2bf2 <__fp_cmp+0x3e>
    2bea:	08 95       	ret
    2bec:	0a 26       	eor	r0, r26
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <__fp_cmp+0x3e>
    2bf0:	a1 40       	sbci	r26, 0x01	; 1
    2bf2:	a6 95       	lsr	r26
    2bf4:	8f ef       	ldi	r24, 0xFF	; 255
    2bf6:	81 1d       	adc	r24, r1
    2bf8:	81 1d       	adc	r24, r1
    2bfa:	08 95       	ret

00002bfc <__fp_inf>:
    2bfc:	97 f9       	bld	r25, 7
    2bfe:	9f 67       	ori	r25, 0x7F	; 127
    2c00:	80 e8       	ldi	r24, 0x80	; 128
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	08 95       	ret

00002c08 <__fp_nan>:
    2c08:	9f ef       	ldi	r25, 0xFF	; 255
    2c0a:	80 ec       	ldi	r24, 0xC0	; 192
    2c0c:	08 95       	ret

00002c0e <__fp_pscA>:
    2c0e:	00 24       	eor	r0, r0
    2c10:	0a 94       	dec	r0
    2c12:	16 16       	cp	r1, r22
    2c14:	17 06       	cpc	r1, r23
    2c16:	18 06       	cpc	r1, r24
    2c18:	09 06       	cpc	r0, r25
    2c1a:	08 95       	ret

00002c1c <__fp_pscB>:
    2c1c:	00 24       	eor	r0, r0
    2c1e:	0a 94       	dec	r0
    2c20:	12 16       	cp	r1, r18
    2c22:	13 06       	cpc	r1, r19
    2c24:	14 06       	cpc	r1, r20
    2c26:	05 06       	cpc	r0, r21
    2c28:	08 95       	ret

00002c2a <__fp_round>:
    2c2a:	09 2e       	mov	r0, r25
    2c2c:	03 94       	inc	r0
    2c2e:	00 0c       	add	r0, r0
    2c30:	11 f4       	brne	.+4      	; 0x2c36 <__fp_round+0xc>
    2c32:	88 23       	and	r24, r24
    2c34:	52 f0       	brmi	.+20     	; 0x2c4a <__fp_round+0x20>
    2c36:	bb 0f       	add	r27, r27
    2c38:	40 f4       	brcc	.+16     	; 0x2c4a <__fp_round+0x20>
    2c3a:	bf 2b       	or	r27, r31
    2c3c:	11 f4       	brne	.+4      	; 0x2c42 <__fp_round+0x18>
    2c3e:	60 ff       	sbrs	r22, 0
    2c40:	04 c0       	rjmp	.+8      	; 0x2c4a <__fp_round+0x20>
    2c42:	6f 5f       	subi	r22, 0xFF	; 255
    2c44:	7f 4f       	sbci	r23, 0xFF	; 255
    2c46:	8f 4f       	sbci	r24, 0xFF	; 255
    2c48:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4a:	08 95       	ret

00002c4c <__fp_split3>:
    2c4c:	57 fd       	sbrc	r21, 7
    2c4e:	90 58       	subi	r25, 0x80	; 128
    2c50:	44 0f       	add	r20, r20
    2c52:	55 1f       	adc	r21, r21
    2c54:	59 f0       	breq	.+22     	; 0x2c6c <__fp_splitA+0x10>
    2c56:	5f 3f       	cpi	r21, 0xFF	; 255
    2c58:	71 f0       	breq	.+28     	; 0x2c76 <__fp_splitA+0x1a>
    2c5a:	47 95       	ror	r20

00002c5c <__fp_splitA>:
    2c5c:	88 0f       	add	r24, r24
    2c5e:	97 fb       	bst	r25, 7
    2c60:	99 1f       	adc	r25, r25
    2c62:	61 f0       	breq	.+24     	; 0x2c7c <__fp_splitA+0x20>
    2c64:	9f 3f       	cpi	r25, 0xFF	; 255
    2c66:	79 f0       	breq	.+30     	; 0x2c86 <__fp_splitA+0x2a>
    2c68:	87 95       	ror	r24
    2c6a:	08 95       	ret
    2c6c:	12 16       	cp	r1, r18
    2c6e:	13 06       	cpc	r1, r19
    2c70:	14 06       	cpc	r1, r20
    2c72:	55 1f       	adc	r21, r21
    2c74:	f2 cf       	rjmp	.-28     	; 0x2c5a <__fp_split3+0xe>
    2c76:	46 95       	lsr	r20
    2c78:	f1 df       	rcall	.-30     	; 0x2c5c <__fp_splitA>
    2c7a:	08 c0       	rjmp	.+16     	; 0x2c8c <__fp_splitA+0x30>
    2c7c:	16 16       	cp	r1, r22
    2c7e:	17 06       	cpc	r1, r23
    2c80:	18 06       	cpc	r1, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	f1 cf       	rjmp	.-30     	; 0x2c68 <__fp_splitA+0xc>
    2c86:	86 95       	lsr	r24
    2c88:	71 05       	cpc	r23, r1
    2c8a:	61 05       	cpc	r22, r1
    2c8c:	08 94       	sec
    2c8e:	08 95       	ret

00002c90 <__fp_zero>:
    2c90:	e8 94       	clt

00002c92 <__fp_szero>:
    2c92:	bb 27       	eor	r27, r27
    2c94:	66 27       	eor	r22, r22
    2c96:	77 27       	eor	r23, r23
    2c98:	cb 01       	movw	r24, r22
    2c9a:	97 f9       	bld	r25, 7
    2c9c:	08 95       	ret

00002c9e <__gesf2>:
    2c9e:	8a df       	rcall	.-236    	; 0x2bb4 <__fp_cmp>
    2ca0:	08 f4       	brcc	.+2      	; 0x2ca4 <__gesf2+0x6>
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	08 95       	ret

00002ca6 <__mulsf3>:
    2ca6:	0b d0       	rcall	.+22     	; 0x2cbe <__mulsf3x>
    2ca8:	c0 cf       	rjmp	.-128    	; 0x2c2a <__fp_round>
    2caa:	b1 df       	rcall	.-158    	; 0x2c0e <__fp_pscA>
    2cac:	28 f0       	brcs	.+10     	; 0x2cb8 <__mulsf3+0x12>
    2cae:	b6 df       	rcall	.-148    	; 0x2c1c <__fp_pscB>
    2cb0:	18 f0       	brcs	.+6      	; 0x2cb8 <__mulsf3+0x12>
    2cb2:	95 23       	and	r25, r21
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <__mulsf3+0x12>
    2cb6:	a2 cf       	rjmp	.-188    	; 0x2bfc <__fp_inf>
    2cb8:	a7 cf       	rjmp	.-178    	; 0x2c08 <__fp_nan>
    2cba:	11 24       	eor	r1, r1
    2cbc:	ea cf       	rjmp	.-44     	; 0x2c92 <__fp_szero>

00002cbe <__mulsf3x>:
    2cbe:	c6 df       	rcall	.-116    	; 0x2c4c <__fp_split3>
    2cc0:	a0 f3       	brcs	.-24     	; 0x2caa <__mulsf3+0x4>

00002cc2 <__mulsf3_pse>:
    2cc2:	95 9f       	mul	r25, r21
    2cc4:	d1 f3       	breq	.-12     	; 0x2cba <__mulsf3+0x14>
    2cc6:	95 0f       	add	r25, r21
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	55 1f       	adc	r21, r21
    2ccc:	62 9f       	mul	r22, r18
    2cce:	f0 01       	movw	r30, r0
    2cd0:	72 9f       	mul	r23, r18
    2cd2:	bb 27       	eor	r27, r27
    2cd4:	f0 0d       	add	r31, r0
    2cd6:	b1 1d       	adc	r27, r1
    2cd8:	63 9f       	mul	r22, r19
    2cda:	aa 27       	eor	r26, r26
    2cdc:	f0 0d       	add	r31, r0
    2cde:	b1 1d       	adc	r27, r1
    2ce0:	aa 1f       	adc	r26, r26
    2ce2:	64 9f       	mul	r22, r20
    2ce4:	66 27       	eor	r22, r22
    2ce6:	b0 0d       	add	r27, r0
    2ce8:	a1 1d       	adc	r26, r1
    2cea:	66 1f       	adc	r22, r22
    2cec:	82 9f       	mul	r24, r18
    2cee:	22 27       	eor	r18, r18
    2cf0:	b0 0d       	add	r27, r0
    2cf2:	a1 1d       	adc	r26, r1
    2cf4:	62 1f       	adc	r22, r18
    2cf6:	73 9f       	mul	r23, r19
    2cf8:	b0 0d       	add	r27, r0
    2cfa:	a1 1d       	adc	r26, r1
    2cfc:	62 1f       	adc	r22, r18
    2cfe:	83 9f       	mul	r24, r19
    2d00:	a0 0d       	add	r26, r0
    2d02:	61 1d       	adc	r22, r1
    2d04:	22 1f       	adc	r18, r18
    2d06:	74 9f       	mul	r23, r20
    2d08:	33 27       	eor	r19, r19
    2d0a:	a0 0d       	add	r26, r0
    2d0c:	61 1d       	adc	r22, r1
    2d0e:	23 1f       	adc	r18, r19
    2d10:	84 9f       	mul	r24, r20
    2d12:	60 0d       	add	r22, r0
    2d14:	21 1d       	adc	r18, r1
    2d16:	82 2f       	mov	r24, r18
    2d18:	76 2f       	mov	r23, r22
    2d1a:	6a 2f       	mov	r22, r26
    2d1c:	11 24       	eor	r1, r1
    2d1e:	9f 57       	subi	r25, 0x7F	; 127
    2d20:	50 40       	sbci	r21, 0x00	; 0
    2d22:	8a f0       	brmi	.+34     	; 0x2d46 <__mulsf3_pse+0x84>
    2d24:	e1 f0       	breq	.+56     	; 0x2d5e <__mulsf3_pse+0x9c>
    2d26:	88 23       	and	r24, r24
    2d28:	4a f0       	brmi	.+18     	; 0x2d3c <__mulsf3_pse+0x7a>
    2d2a:	ee 0f       	add	r30, r30
    2d2c:	ff 1f       	adc	r31, r31
    2d2e:	bb 1f       	adc	r27, r27
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	88 1f       	adc	r24, r24
    2d36:	91 50       	subi	r25, 0x01	; 1
    2d38:	50 40       	sbci	r21, 0x00	; 0
    2d3a:	a9 f7       	brne	.-22     	; 0x2d26 <__mulsf3_pse+0x64>
    2d3c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d3e:	51 05       	cpc	r21, r1
    2d40:	70 f0       	brcs	.+28     	; 0x2d5e <__mulsf3_pse+0x9c>
    2d42:	5c cf       	rjmp	.-328    	; 0x2bfc <__fp_inf>
    2d44:	a6 cf       	rjmp	.-180    	; 0x2c92 <__fp_szero>
    2d46:	5f 3f       	cpi	r21, 0xFF	; 255
    2d48:	ec f3       	brlt	.-6      	; 0x2d44 <__mulsf3_pse+0x82>
    2d4a:	98 3e       	cpi	r25, 0xE8	; 232
    2d4c:	dc f3       	brlt	.-10     	; 0x2d44 <__mulsf3_pse+0x82>
    2d4e:	86 95       	lsr	r24
    2d50:	77 95       	ror	r23
    2d52:	67 95       	ror	r22
    2d54:	b7 95       	ror	r27
    2d56:	f7 95       	ror	r31
    2d58:	e7 95       	ror	r30
    2d5a:	9f 5f       	subi	r25, 0xFF	; 255
    2d5c:	c1 f7       	brne	.-16     	; 0x2d4e <__mulsf3_pse+0x8c>
    2d5e:	fe 2b       	or	r31, r30
    2d60:	88 0f       	add	r24, r24
    2d62:	91 1d       	adc	r25, r1
    2d64:	96 95       	lsr	r25
    2d66:	87 95       	ror	r24
    2d68:	97 f9       	bld	r25, 7
    2d6a:	08 95       	ret

00002d6c <strcat>:
    2d6c:	fb 01       	movw	r30, r22
    2d6e:	dc 01       	movw	r26, r24
    2d70:	0d 90       	ld	r0, X+
    2d72:	00 20       	and	r0, r0
    2d74:	e9 f7       	brne	.-6      	; 0x2d70 <strcat+0x4>
    2d76:	11 97       	sbiw	r26, 0x01	; 1
    2d78:	01 90       	ld	r0, Z+
    2d7a:	0d 92       	st	X+, r0
    2d7c:	00 20       	and	r0, r0
    2d7e:	e1 f7       	brne	.-8      	; 0x2d78 <strcat+0xc>
    2d80:	08 95       	ret

00002d82 <strlen>:
    2d82:	fc 01       	movw	r30, r24
    2d84:	01 90       	ld	r0, Z+
    2d86:	00 20       	and	r0, r0
    2d88:	e9 f7       	brne	.-6      	; 0x2d84 <strlen+0x2>
    2d8a:	80 95       	com	r24
    2d8c:	90 95       	com	r25
    2d8e:	8e 0f       	add	r24, r30
    2d90:	9f 1f       	adc	r25, r31
    2d92:	08 95       	ret

00002d94 <itoa>:
    2d94:	fb 01       	movw	r30, r22
    2d96:	9f 01       	movw	r18, r30
    2d98:	e8 94       	clt
    2d9a:	42 30       	cpi	r20, 0x02	; 2
    2d9c:	c4 f0       	brlt	.+48     	; 0x2dce <itoa+0x3a>
    2d9e:	45 32       	cpi	r20, 0x25	; 37
    2da0:	b4 f4       	brge	.+44     	; 0x2dce <itoa+0x3a>
    2da2:	4a 30       	cpi	r20, 0x0A	; 10
    2da4:	29 f4       	brne	.+10     	; 0x2db0 <itoa+0x1c>
    2da6:	97 fb       	bst	r25, 7
    2da8:	1e f4       	brtc	.+6      	; 0x2db0 <itoa+0x1c>
    2daa:	90 95       	com	r25
    2dac:	81 95       	neg	r24
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	64 2f       	mov	r22, r20
    2db2:	77 27       	eor	r23, r23
    2db4:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__udivmodhi4>
    2db8:	80 5d       	subi	r24, 0xD0	; 208
    2dba:	8a 33       	cpi	r24, 0x3A	; 58
    2dbc:	0c f0       	brlt	.+2      	; 0x2dc0 <itoa+0x2c>
    2dbe:	89 5d       	subi	r24, 0xD9	; 217
    2dc0:	81 93       	st	Z+, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	a1 f7       	brne	.-24     	; 0x2db0 <itoa+0x1c>
    2dc8:	16 f4       	brtc	.+4      	; 0x2dce <itoa+0x3a>
    2dca:	5d e2       	ldi	r21, 0x2D	; 45
    2dcc:	51 93       	st	Z+, r21
    2dce:	10 82       	st	Z, r1
    2dd0:	c9 01       	movw	r24, r18
    2dd2:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <strrev>

00002dd6 <strrev>:
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	fc 01       	movw	r30, r24
    2dda:	67 2f       	mov	r22, r23
    2ddc:	71 91       	ld	r23, Z+
    2dde:	77 23       	and	r23, r23
    2de0:	e1 f7       	brne	.-8      	; 0x2dda <strrev+0x4>
    2de2:	32 97       	sbiw	r30, 0x02	; 2
    2de4:	04 c0       	rjmp	.+8      	; 0x2dee <strrev+0x18>
    2de6:	7c 91       	ld	r23, X
    2de8:	6d 93       	st	X+, r22
    2dea:	70 83       	st	Z, r23
    2dec:	62 91       	ld	r22, -Z
    2dee:	ae 17       	cp	r26, r30
    2df0:	bf 07       	cpc	r27, r31
    2df2:	c8 f3       	brcs	.-14     	; 0x2de6 <strrev+0x10>
    2df4:	08 95       	ret

00002df6 <__udivmodhi4>:
    2df6:	aa 1b       	sub	r26, r26
    2df8:	bb 1b       	sub	r27, r27
    2dfa:	51 e1       	ldi	r21, 0x11	; 17
    2dfc:	07 c0       	rjmp	.+14     	; 0x2e0c <__udivmodhi4_ep>

00002dfe <__udivmodhi4_loop>:
    2dfe:	aa 1f       	adc	r26, r26
    2e00:	bb 1f       	adc	r27, r27
    2e02:	a6 17       	cp	r26, r22
    2e04:	b7 07       	cpc	r27, r23
    2e06:	10 f0       	brcs	.+4      	; 0x2e0c <__udivmodhi4_ep>
    2e08:	a6 1b       	sub	r26, r22
    2e0a:	b7 0b       	sbc	r27, r23

00002e0c <__udivmodhi4_ep>:
    2e0c:	88 1f       	adc	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	5a 95       	dec	r21
    2e12:	a9 f7       	brne	.-22     	; 0x2dfe <__udivmodhi4_loop>
    2e14:	80 95       	com	r24
    2e16:	90 95       	com	r25
    2e18:	bc 01       	movw	r22, r24
    2e1a:	cd 01       	movw	r24, r26
    2e1c:	08 95       	ret

00002e1e <_exit>:
    2e1e:	f8 94       	cli

00002e20 <__stop_program>:
    2e20:	ff cf       	rjmp	.-2      	; 0x2e20 <__stop_program>
